{
 "mypackage": {
  "doc": null,
  "source": [],
  "path": "/home/samuel/dev/apidoc/test/input/src/mypackage/__init__.py",
  "dict": {},
  "name": "mypackage",
  "type": "module"
 },
 "mypackage.mymodule": {
  "doc": "The main module.\n\nThis is where all the fun happens.",
  "source": [
   "\"\"\"\n",
   "The main module.\n",
   "\n",
   "This is where all the fun happens.\n",
   "\"\"\"\n",
   "\n",
   "#-------------------------------------------------------------------------------\n",
   "\n",
   "import collections\n",
   "import logging\n",
   "import sys\n",
   "\n",
   "# FIXME\n",
   "import mypackage.support\n",
   "from   . import support\n",
   "\n",
   "#-------------------------------------------------------------------------------\n",
   "\n",
   "def foo(x, y=\"0\"):\n",
   "    x = int(x)\n",
   "    y = int(y)\n",
   "    logging.debug(\"invoking foo({}, {})\".format(x, y))\n",
   "    return support.foo(x, y)\n",
   "\n",
   "\n",
   "#-------------------------------------------------------------------------------\n",
   "\n",
   "class Master:\n",
   "    \"\"\"\n",
   "    The master class.\n",
   "    \"\"\"\n",
   "    \n",
   "    __total_value = 0\n",
   "\n",
   "    def __init__(self, value):\n",
   "        self.__value = value\n",
   "        Master.__total_value += value\n",
   "\n",
   "\n",
   "    @property\n",
   "    def value(self):\n",
   "        \"\"\"\n",
   "        The value.\n",
   "        \"\"\"\n",
   "        return self.__value\n",
   "\n",
   "\n",
   "    @staticmethod\n",
   "    def get_total_value():\n",
   "        return Master.__total_value\n",
   "\n",
   "\n",
   "    @classmethod\n",
   "    def build(class_, x, y):\n",
   "        return class_(foo(x, y))\n",
   "\n",
   "\n",
   "\n",
   "class Child(Master):\n",
   "\n",
   "    class Inner(collections.namedtuple(\"Inner\", (\"foo\", \"bar\", \"baz\"))):\n",
   "\n",
   "        pass\n",
   "\n",
   "\n",
   "\n",
   "    def __init__(self):\n",
   "        super(Child, self).__init__(42)\n",
   "        self.__tally = self.get_total_value()\n",
   "        self.__stuff = Child(10, 20, 30)\n",
   "\n",
   "\n",
   "    def __get_tally(self):\n",
   "        \"\"\"\n",
   "        Tally-Ho!\n",
   "        \"\"\"\n",
   "        return self.__tally\n",
   "\n",
   "\n",
   "    def __set_tally(self, tally):\n",
   "        self.__tally = tally\n",
   "\n",
   "\n",
   "    tally = property(__get_tally, __set_tally)\n",
   "\n",
   "\n",
   "    \n"
  ],
  "path": "/home/samuel/dev/apidoc/test/input/src/mypackage/mymodule.py",
  "dict": {
   "Master": {
    "doc": "The master class.",
    "bases": [
     "object"
    ],
    "mro": [
     "Master",
     "object"
    ],
    "dict": {
     "value": {
      "value": "<property object at 0x7fb08990b6d8>",
      "type": "value"
     },
     "build": {
      "value": "<bound method type.build of <class 'mypackage.mymodule.Master'>>",
      "type": "value"
     },
     "_Master__total_value": {
      "value": "0",
      "type": "value"
     },
     "get_total_value": {
      "parameters": [],
      "type": "function",
      "lines": [
       48,
       51
      ],
      "doc": null
     }
    },
    "type": "class",
    "lines": [
     28,
     56
    ]
   },
   "collections": {
    "path": "/home/samuel/sw/Python-3.4.0b1/lib/python3.4/collections/__init__.py",
    "name": "collections",
    "type": "module"
   },
   "support": {
    "path": "/home/samuel/dev/apidoc/test/input/src/mypackage/support.py",
    "name": "mypackage.support",
    "type": "module"
   },
   "Child": {
    "doc": null,
    "bases": [
     "Master"
    ],
    "mro": [
     "Child",
     "Master",
     "object"
    ],
    "dict": {
     "build": {
      "value": "<bound method type.build of <class 'mypackage.mymodule.Child'>>",
      "type": "value"
     },
     "Inner": {
      "doc": null,
      "bases": [
       "Inner"
      ],
      "mro": [
       "Inner",
       "Inner",
       "tuple",
       "object"
      ],
      "dict": {
       "_fields": {
        "value": "('foo', 'bar', 'baz')",
        "type": "value"
       },
       "baz": {
        "value": "<property object at 0x7fb08990bae8>",
        "type": "value"
       },
       "foo": {
        "value": "<property object at 0x7fb08990ba48>",
        "type": "value"
       },
       "_asdict": {
        "type": "function"
       },
       "_replace": {
        "type": "function"
       },
       "index": {
        "value": "<method 'index' of 'tuple' objects>",
        "type": "value"
       },
       "bar": {
        "value": "<property object at 0x7fb08990ba98>",
        "type": "value"
       },
       "_make": {
        "value": "<bound method type._make of <class 'mypackage.mymodule.Child.Inner'>>",
        "type": "value"
       },
       "_source": {
        "value": "\"from builtins import property as _property, tuple as _tuple\\nfrom operator import itemgetter as _itemgetter\\nfrom collections import OrderedDict\\n\\nclass Inner(tuple):\\n    'Inner(foo, bar, baz)'\\n\\n    __slots__ = ()\\n\\n    _fields = ('foo', 'bar', 'baz')\\n\\n    def __new__(_cls, foo, bar, baz):\\n        'Create new instance of Inner(foo, bar, baz)'\\n        return _tuple.__new__(_cls, (foo, bar, baz))\\n\\n    @classmethod\\n    def _make(cls, iterable, new=tuple.__new__, len=len):\\n        'Make a new Inner object from a sequence or iterable'\\n        result = new(cls, iterable)\\n        if len(result) != 3:\\n            raise TypeError('Expected 3 arguments, got %d' % len(result))\\n        return result\\n\\n    def _replace(_self, **kwds):\\n        'Return a new Inner object replacing specified fields with new values'\\n        result = _self._make(map(kwds.pop, ('foo', 'bar', 'baz'), _self))\\n        if kwds:\\n            raise ValueError('Got unexpected field names: %r' % list(kwds))\\n        return result\\n\\n    def __repr__(self):\\n        'Return a nicely formatted representation string'\\n        return self.__class__.__name__ + '(foo=%r, bar=%r, baz=%r)' % self\\n\\n    @property\\n    def __dict__(self):\\n        'A new OrderedDict mapping field names to their values'\\n        return OrderedDict(zip(self._fields, self))\\n\\n    def _asdict(self):\\n        '''Return a new OrderedDict which maps field names to their values.\\n           This method is obsolete.  Use vars(nt) or nt.__dict__ instead.\\n        '''\\n        return self.__dict__\\n\\n    def __getnewargs__(self):\\n        'Return self as a plain tuple.  Used by copy and pickle.'\\n        return tuple(self)\\n\\n    def __getstate__(self):\\n        'Exclude the OrderedDict from pickling'\\n        return None\\n\\n    foo = _property(_itemgetter(0), doc='Alias for field number 0')\\n\\n    bar = _property(_itemgetter(1), doc='Alias for field number 1')\\n\\n    baz = _property(_itemgetter(2), doc='Alias for field number 2')\\n\\n\"",
        "type": "value"
       },
       "count": {
        "value": "<method 'count' of 'tuple' objects>",
        "type": "value"
       }
      },
      "type": "class",
      "lines": [
       61,
       64
      ]
     },
     "_Master__total_value": {
      "value": "0",
      "type": "value"
     },
     "get_total_value": {
      "parameters": [],
      "type": "function",
      "lines": [
       48,
       51
      ],
      "doc": null
     },
     "_Child__get_tally": {
      "parameters": [
       {
        "kind": "POSITIONAL_OR_KEYWORD",
        "name": "self",
        "default": null,
        "annotation": null
       }
      ],
      "type": "function",
      "lines": [
       73,
       78
      ],
      "doc": "Tally-Ho!"
     },
     "value": {
      "value": "<property object at 0x7fb08990b6d8>",
      "type": "value"
     },
     "_Child__set_tally": {
      "parameters": [
       {
        "kind": "POSITIONAL_OR_KEYWORD",
        "name": "self",
        "default": null,
        "annotation": null
       },
       {
        "kind": "POSITIONAL_OR_KEYWORD",
        "name": "tally",
        "default": null,
        "annotation": null
       }
      ],
      "type": "function",
      "lines": [
       80,
       82
      ],
      "doc": null
     },
     "tally": {
      "value": "<property object at 0x7fb08990bbd8>",
      "type": "value"
     }
    },
    "type": "class",
    "lines": [
     59,
     85
    ]
   },
   "mypackage": {
    "path": "/home/samuel/dev/apidoc/test/input/src/mypackage/__init__.py",
    "name": "mypackage",
    "type": "module"
   },
   "sys": {
    "path": "None",
    "name": "sys",
    "type": "module"
   },
   "logging": {
    "path": "/home/samuel/sw/Python-3.4.0b1/lib/python3.4/logging/__init__.py",
    "name": "logging",
    "type": "module"
   },
   "foo": {
    "parameters": [
     {
      "kind": "POSITIONAL_OR_KEYWORD",
      "name": "x",
      "default": null,
      "annotation": null
     },
     {
      "kind": "POSITIONAL_OR_KEYWORD",
      "name": "y",
      "default": "'0'",
      "annotation": null
     }
    ],
    "type": "function",
    "lines": [
     19,
     24
    ],
    "doc": null
   }
  },
  "name": "mypackage.mymodule",
  "type": "module"
 },
 "mypackage.support": {
  "doc": "Support tools for the main module.",
  "source": [
   "\"\"\"\n",
   "Support tools for the main module.\n",
   "\"\"\"\n",
   "\n",
   "import math\n",
   "\n",
   "def foo(x:int, y:int=0):\n",
   "    return x ** 2 * math.exp(y)\n",
   "\n",
   "\n"
  ],
  "path": "/home/samuel/dev/apidoc/test/input/src/mypackage/support.py",
  "dict": {
   "foo": {
    "parameters": [
     {
      "kind": "POSITIONAL_OR_KEYWORD",
      "name": "x",
      "default": null,
      "annotation": "<class 'int'>"
     },
     {
      "kind": "POSITIONAL_OR_KEYWORD",
      "name": "y",
      "default": "0",
      "annotation": "<class 'int'>"
     }
    ],
    "type": "function",
    "lines": [
     7,
     9
    ],
    "doc": null
   },
   "math": {
    "path": "/home/samuel/sw/Python-3.4.0b1/lib/python3.4/lib-dynload/math.cpython-34m.so",
    "name": "math",
    "type": "module"
   }
  },
  "name": "mypackage.support",
  "type": "module"
 }
}