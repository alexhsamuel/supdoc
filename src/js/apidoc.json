{
 "type": "toplevel",
 "fqname": null,
 "modules": {
  "apidoc": {
   "source": [
    "\"\"\"\n",
    "API documentation extraction service.\n",
    "\"\"\"\n"
   ],
   "path": "/home/samuel/dev/apidoc/src/python/apidoc/__init__.py",
   "fqname": "apidoc",
   "dict": {
    "path": {
     "type": "module",
     "name": "path",
     "path": "/home/samuel/dev/apidoc/src/python/apidoc/path.py",
     "fqname": "apidoc.path"
    },
    "modules": {
     "type": "module",
     "name": "modules",
     "path": "/home/samuel/dev/apidoc/src/python/apidoc/modules.py",
     "fqname": "apidoc.modules"
    }
   },
   "modules": {
    "inspector": {
     "source": [
      "\"\"\"\n",
      "API extraction by importing and inspecting modules.\n",
      "\n",
      "Invoke like this:\n",
      "\n",
      "  python3 -m apidoc.inspector /path/to/package > apidoc.json\n",
      "\n",
      "\"\"\"\n",
      "\n",
      "#-------------------------------------------------------------------------------\n",
      "\n",
      "import functools\n",
      "import inspect\n",
      "import logging\n",
      "import os\n",
      "import sys\n",
      "\n",
      "from   apidoc import modules\n",
      "from   apidoc.path import Path\n",
      "\n",
      "#-------------------------------------------------------------------------------\n",
      "\n",
      "def is_special_symbol(symbol):\n",
      "    return symbol.startswith(\"__\") and symbol.endswith(\"__\")\n",
      "\n",
      "\n",
      "#-------------------------------------------------------------------------------\n",
      "\n",
      "class Context:\n",
      "\n",
      "    def __init__(self):\n",
      "        pass\n",
      "\n",
      "\n",
      "    def include(self, obj):\n",
      "        try:\n",
      "            path = inspect.getsourcefile(obj)\n",
      "        except TypeError:\n",
      "            # Built-in module.\n",
      "            return False\n",
      "        else:\n",
      "            return path is not None\n",
      "\n",
      "\n",
      "\n",
      "def _get_doc(obj):\n",
      "    doc = inspect.getdoc(obj)\n",
      "    if doc is None or doc.strip() == \"\":\n",
      "        return {}\n",
      "    else:\n",
      "        # Construct paragraphs separated by blank lines.\n",
      "        # FIXME: While pretty standard, this behavior should be configurable.\n",
      "        paragraphs = []\n",
      "        new = True\n",
      "        for line in doc.splitlines():\n",
      "            if line == \"\":\n",
      "                new = True\n",
      "            elif new:\n",
      "                paragraphs.append(line)\n",
      "                new = False\n",
      "            else:\n",
      "                paragraphs[-1] += \" \" + line\n",
      "        return {\n",
      "            \"summary\": paragraphs.pop(0),\n",
      "            \"doc\": paragraphs,\n",
      "        }\n",
      "\n",
      "\n",
      "def _get_lines(obj):\n",
      "    try:\n",
      "        lines, start_num = inspect.getsourcelines(obj)\n",
      "    except (OSError, ValueError):\n",
      "        return None\n",
      "    else:\n",
      "        return [start_num, start_num + len(lines)]\n",
      "\n",
      "\n",
      "def _get_module_path(module):\n",
      "    try:\n",
      "        path = inspect.getsourcefile(module)\n",
      "    except TypeError:\n",
      "        # Built-in module.\n",
      "        path = None\n",
      "    else:\n",
      "        if path is None:\n",
      "            path = inspect.getfile(module)\n",
      "    return None if path is None else Path(path)\n",
      "\n",
      "\n",
      "def _inspect_module(context, fqname, module):\n",
      "    return dict(\n",
      "        type    =\"module\",\n",
      "        fqname  =module.__name__, \n",
      "        name    =modules.Name(module.__name__)[-1],\n",
      "        path    =str(_get_module_path(module)),\n",
      "        )\n",
      "\n",
      "\n",
      "def _inspect_package_or_module(context, fqname, module):\n",
      "    result = _inspect_module(context, fqname, module)\n",
      "\n",
      "    # FIXME: Work around a bug in Python 3.4 that occurs whe importing\n",
      "    # an empty module file.\n",
      "    # source = inspect.getsourcelines(module)\n",
      "    import tokenize\n",
      "    path = _get_module_path(module)\n",
      "    with path.open() as file:\n",
      "        source = file.readlines()\n",
      "\n",
      "    result.update(\n",
      "        source      =source,\n",
      "        dict        =dict( \n",
      "            (n, _inspect(context, fqname + n, o)) \n",
      "            for n, o in inspect.getmembers(module)\n",
      "            if not is_special_symbol(n)\n",
      "            ),\n",
      "        )\n",
      "    result.update(_get_doc(module))\n",
      "\n",
      "    if modules.is_package(module):\n",
      "        # Include modules and packages that are direct children.\n",
      "        result.update(\n",
      "            type    =\"package\",\n",
      "            modules = {\n",
      "                n: _inspect_package_or_module(context, fqname + n, m)\n",
      "                for n, m in modules.get_submodules(module)\n",
      "            })\n",
      "    return result\n",
      "\n",
      "\n",
      "def inspect_package(context, path):\n",
      "    path = Path(path)\n",
      "    if not modules.is_package_dir(path):\n",
      "        raise ValueError(\"not a package directory: {}\".format(path))\n",
      "\n",
      "    fqname = modules.Name(path.stem)\n",
      "    package = modules.load_module(fqname, path / \"__init__.py\")\n",
      "    return dict(\n",
      "        fqname  =None,\n",
      "        type    =\"toplevel\",\n",
      "        modules ={\n",
      "            str(fqname): _inspect_package_or_module(context, fqname, package)\n",
      "            },\n",
      "        )\n",
      "\n",
      "\n",
      "def _inspect_class(context, fqname, class_):\n",
      "    result = dict(\n",
      "        type        =\"class\",\n",
      "        )\n",
      "    if context.include(class_):\n",
      "        result.update(\n",
      "            fqname  =str(fqname),\n",
      "            lines   =_get_lines(class_),\n",
      "            bases   =[ c.__name__ for c in class_.__bases__ ],\n",
      "            mro     =[ c.__name__ for c in inspect.getmro(class_) ],\n",
      "            dict    ={\n",
      "                n: _inspect(context, fqname + n, o)\n",
      "                for n, o in inspect.getmembers(class_)\n",
      "                if not is_special_symbol(n)\n",
      "                },\n",
      "            )\n",
      "        result.update(_get_doc(class_))\n",
      "    return result\n",
      "\n",
      "\n",
      "def _inspect_parameter(parameter):\n",
      "    get = lambda x: None if x is parameter.empty else repr(x)\n",
      "    return dict(\n",
      "        name        =parameter.name,\n",
      "        kind        =str(parameter.kind),\n",
      "        annotation  =get(parameter.annotation),\n",
      "        default     =get(parameter.default),\n",
      "        )\n",
      "\n",
      "\n",
      "def _inspect_function(context, fqname, function):\n",
      "    result = dict(\n",
      "        fqname  =str(fqname),\n",
      "        type    =\"function\",\n",
      "        )\n",
      "    if context.include(function):\n",
      "        signature = inspect.signature(function)\n",
      "        result.update(\n",
      "            lines       =_get_lines(function),\n",
      "            parameters  =[\n",
      "                _inspect_parameter(p)\n",
      "                for n, p in signature.parameters.items()\n",
      "                ],\n",
      "            )\n",
      "        result.update(_get_doc(function))\n",
      "    return result\n",
      "\n",
      "\n",
      "def _inspect(context, fqname, obj):\n",
      "    if inspect.isfunction(obj):\n",
      "        return _inspect_function(context, fqname, obj)\n",
      "    elif inspect.isclass(obj):\n",
      "        return _inspect_class(context, fqname, obj)\n",
      "    elif inspect.ismodule(obj):\n",
      "        return _inspect_module(context, fqname, obj)\n",
      "    else:\n",
      "        return {\n",
      "            \"type\"  : \"value\",\n",
      "            \"value\" : repr(obj),\n",
      "            }\n",
      "\n",
      "\n",
      "#-------------------------------------------------------------------------------\n",
      "\n",
      "import json\n",
      "\n",
      "if __name__ == \"__main__\":\n",
      "    logging.getLogger().setLevel(logging.DEBUG)\n",
      "    infos = inspect_package(Context(), sys.argv[1])\n",
      "    json.dump(infos, sys.stdout, indent=1)\n",
      "\n",
      "\n"
     ],
     "path": "/home/samuel/dev/apidoc/src/python/apidoc/inspector.py",
     "fqname": "apidoc.inspector",
     "dict": {
      "_inspect": {
       "type": "function",
       "lines": [
        195,
        207
       ],
       "parameters": [
        {
         "name": "context",
         "default": null,
         "annotation": null,
         "kind": "POSITIONAL_OR_KEYWORD"
        },
        {
         "name": "fqname",
         "default": null,
         "annotation": null,
         "kind": "POSITIONAL_OR_KEYWORD"
        },
        {
         "name": "obj",
         "default": null,
         "annotation": null,
         "kind": "POSITIONAL_OR_KEYWORD"
        }
       ],
       "fqname": "apidoc.inspector._inspect"
      },
      "_get_module_path": {
       "type": "function",
       "lines": [
        78,
        88
       ],
       "parameters": [
        {
         "name": "module",
         "default": null,
         "annotation": null,
         "kind": "POSITIONAL_OR_KEYWORD"
        }
       ],
       "fqname": "apidoc.inspector._get_module_path"
      },
      "sys": {
       "type": "module",
       "name": "sys",
       "path": "None",
       "fqname": "sys"
      },
      "Path": {
       "lines": [
        16,
        41
       ],
       "mro": [
        "Path",
        "PosixPath",
        "Path",
        "PurePosixPath",
        "PurePath",
        "object"
       ],
       "fqname": "apidoc.inspector.Path",
       "dict": {
        "is_absolute": {
         "lines": [
          848,
          854
         ],
         "summary": "True if the path is absolute (has both a root and, if applicable, a drive).",
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "type": "function",
         "fqname": "apidoc.inspector.Path.is_absolute",
         "doc": []
        },
        "is_reserved": {
         "lines": [
          855,
          859
         ],
         "summary": "Return True if the path contains one of the special names reserved by the system, if any.",
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "type": "function",
         "fqname": "apidoc.inspector.Path.is_reserved",
         "doc": []
        },
        "_raw_open": {
         "lines": [
          946,
          954
         ],
         "summary": "Open the file pointed by this path and return a file descriptor, as os.open() does.",
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          },
          {
           "name": "flags",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          },
          {
           "name": "mode",
           "default": "511",
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "type": "function",
         "fqname": "apidoc.inspector.Path._raw_open",
         "doc": []
        },
        "touch": {
         "lines": [
          1072,
          1094
         ],
         "summary": "Create this file with the given access mode, if it doesn't exist.",
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          },
          {
           "name": "mode",
           "default": "438",
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          },
          {
           "name": "exist_ok",
           "default": "True",
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "type": "function",
         "fqname": "apidoc.inspector.Path.touch",
         "doc": []
        },
        "relative_to": {
         "lines": [
          775,
          806
         ],
         "summary": "Return the relative path to another path identified by the passed arguments.  If the operation is not possible (because this is not a subpath of the other path), raise ValueError.",
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          },
          {
           "name": "other",
           "default": null,
           "annotation": null,
           "kind": "VAR_POSITIONAL"
          }
         ],
         "type": "function",
         "fqname": "apidoc.inspector.Path.relative_to",
         "doc": []
        },
        "_make_child": {
         "type": "function",
         "lines": [
          619,
          624
         ],
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          },
          {
           "name": "args",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "fqname": "apidoc.inspector.Path._make_child"
        },
        "_from_parsed_parts": {
         "type": "value",
         "value": "<bound method type._from_parsed_parts of <class 'apidoc.path.Path'>>"
        },
        "is_dir": {
         "lines": [
          1192,
          1204
         ],
         "summary": "Whether this path is a directory.",
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "type": "function",
         "fqname": "apidoc.inspector.Path.is_dir",
         "doc": []
        },
        "parts": {
         "type": "value",
         "value": "<property object at 0x7fd1212d9a48>"
        },
        "lchmod": {
         "lines": [
          1117,
          1125
         ],
         "summary": "Like chmod(), except if the path points to a symlink, the symlink's permissions are changed, rather than its target's.",
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          },
          {
           "name": "mode",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "type": "function",
         "fqname": "apidoc.inspector.Path.lchmod",
         "doc": []
        },
        "_drv": {
         "type": "value",
         "value": "<member '_drv' of 'PurePath' objects>"
        },
        "with_name": {
         "lines": [
          748,
          754
         ],
         "summary": "Return a new path with the file name changed.",
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          },
          {
           "name": "name",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "type": "function",
         "fqname": "apidoc.inspector.Path.with_name",
         "doc": []
        },
        "rename": {
         "lines": [
          1152,
          1159
         ],
         "summary": "Rename this path to the given path.",
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          },
          {
           "name": "target",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "type": "function",
         "fqname": "apidoc.inspector.Path.rename",
         "doc": []
        },
        "open": {
         "lines": [
          1061,
          1071
         ],
         "summary": "Open the file pointed by this path and return a file object, as the built-in open() function does.",
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          },
          {
           "name": "mode",
           "default": "'r'",
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          },
          {
           "name": "buffering",
           "default": "-1",
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          },
          {
           "name": "encoding",
           "default": "None",
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          },
          {
           "name": "errors",
           "default": "None",
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          },
          {
           "name": "newline",
           "default": "None",
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "type": "function",
         "fqname": "apidoc.inspector.Path.open",
         "doc": []
        },
        "rmdir": {
         "lines": [
          1135,
          1142
         ],
         "summary": "Remove this directory.  The directory must be empty.",
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "type": "function",
         "fqname": "apidoc.inspector.Path.rmdir",
         "doc": []
        },
        "stat": {
         "lines": [
          1040,
          1046
         ],
         "summary": "Return the result of the stat() system call on this path, like os.stat() does.",
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "type": "function",
         "fqname": "apidoc.inspector.Path.stat",
         "doc": []
        },
        "suffixes": {
         "type": "value",
         "value": "<property object at 0x7fd1212d99a8>"
        },
        "mkdir": {
         "type": "function",
         "lines": [
          1095,
          1108
         ],
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          },
          {
           "name": "mode",
           "default": "511",
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          },
          {
           "name": "parents",
           "default": "False",
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "fqname": "apidoc.inspector.Path.mkdir"
        },
        "parents": {
         "type": "value",
         "value": "<property object at 0x7fd1212d9ae8>"
        },
        "match": {
         "lines": [
          860,
          884
         ],
         "summary": "Return True if this path matches the given pattern.",
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          },
          {
           "name": "path_pattern",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "type": "function",
         "fqname": "apidoc.inspector.Path.match",
         "doc": []
        },
        "starts_with": {
         "type": "function",
         "lines": [
          39,
          41
         ],
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          },
          {
           "name": "prefix",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "fqname": "apidoc.inspector.Path.starts_with"
        },
        "parent": {
         "type": "value",
         "value": "<property object at 0x7fd1212d9a98>"
        },
        "stem": {
         "type": "value",
         "value": "<property object at 0x7fd1212d99f8>"
        },
        "cwd": {
         "type": "value",
         "value": "<bound method type.cwd of <class 'apidoc.path.Path'>>"
        },
        "suffix": {
         "type": "value",
         "value": "<property object at 0x7fd1212d9958>"
        },
        "is_block_device": {
         "lines": [
          1231,
          1243
         ],
         "summary": "Whether this path is a block device.",
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "type": "function",
         "fqname": "apidoc.inspector.Path.is_block_device",
         "doc": []
        },
        "root": {
         "type": "value",
         "value": "<property object at 0x7fd1212d9868>"
        },
        "owner": {
         "lines": [
          1047,
          1053
         ],
         "summary": "Return the login name of the file owner.",
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "type": "function",
         "fqname": "apidoc.inspector.Path.owner",
         "doc": []
        },
        "joinpath": {
         "lines": [
          819,
          826
         ],
         "summary": "Combine this path with one or several arguments, and return a new path representing either a subpath (if all arguments are relative paths) or a totally different path (if one of the arguments is anchored).",
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          },
          {
           "name": "args",
           "default": null,
           "annotation": null,
           "kind": "VAR_POSITIONAL"
          }
         ],
         "type": "function",
         "fqname": "apidoc.inspector.Path.joinpath",
         "doc": []
        },
        "_root": {
         "type": "value",
         "value": "<member '_root' of 'PurePath' objects>"
        },
        "resolve": {
         "lines": [
          1020,
          1039
         ],
         "summary": "Make the path absolute, resolving all symlinks on the way and also normalizing it (for example turning slashes into backslashes under Windows).",
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "type": "function",
         "fqname": "apidoc.inspector.Path.resolve",
         "doc": []
        },
        "name": {
         "type": "value",
         "value": "<property object at 0x7fd1212d9908>"
        },
        "glob": {
         "lines": [
          978,
          989
         ],
         "summary": "Iterate over this subtree and yield all existing files (of any kind, including directories) matching the given pattern.",
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          },
          {
           "name": "pattern",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "type": "function",
         "fqname": "apidoc.inspector.Path.glob",
         "doc": []
        },
        "with_suffix": {
         "lines": [
          25,
          37
         ],
         "summary": "@todo   This hopefully will not be needed when the base method is fixed.",
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          },
          {
           "name": "suffix",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "type": "function",
         "fqname": "apidoc.inspector.Path.with_suffix",
         "doc": []
        },
        "_raise_closed": {
         "type": "function",
         "lines": [
          939,
          941
         ],
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "fqname": "apidoc.inspector.Path._raise_closed"
        },
        "_init": {
         "type": "function",
         "lines": [
          915,
          924
         ],
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          },
          {
           "name": "template",
           "default": "None",
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "fqname": "apidoc.inspector.Path._init"
        },
        "as_posix": {
         "lines": [
          635,
          640
         ],
         "summary": "Return the string representation of the path with forward (/) slashes.",
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "type": "function",
         "fqname": "apidoc.inspector.Path.as_posix",
         "doc": []
        },
        "is_fifo": {
         "lines": [
          1257,
          1269
         ],
         "summary": "Whether this path is a FIFO.",
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "type": "function",
         "fqname": "apidoc.inspector.Path.is_fifo",
         "doc": []
        },
        "anchor": {
         "type": "value",
         "value": "<property object at 0x7fd1212d98b8>"
        },
        "_closed": {
         "type": "value",
         "value": "<member '_closed' of 'Path' objects>"
        },
        "_pparts": {
         "type": "value",
         "value": "<member '_pparts' of 'PurePath' objects>"
        },
        "replace": {
         "lines": [
          1160,
          1168
         ],
         "summary": "Rename this path to the given path, clobbering the existing destination if it exists.",
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          },
          {
           "name": "target",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "type": "function",
         "fqname": "apidoc.inspector.Path.replace",
         "doc": []
        },
        "_cached_cparts": {
         "type": "value",
         "value": "<member '_cached_cparts' of 'PurePath' objects>"
        },
        "symlink_to": {
         "lines": [
          1169,
          1177
         ],
         "summary": "Make this path a symlink pointing to the given path. Note the order of arguments (self, target) is the reverse of os.symlink's.",
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          },
          {
           "name": "target",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          },
          {
           "name": "target_is_directory",
           "default": "False",
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "type": "function",
         "fqname": "apidoc.inspector.Path.symlink_to",
         "doc": []
        },
        "_make_child_relpath": {
         "type": "function",
         "lines": [
          925,
          930
         ],
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          },
          {
           "name": "part",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "fqname": "apidoc.inspector.Path._make_child_relpath"
        },
        "exists": {
         "lines": [
          1180,
          1191
         ],
         "summary": "Whether this path exists.",
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "type": "function",
         "fqname": "apidoc.inspector.Path.exists",
         "doc": []
        },
        "_flavour": {
         "type": "value",
         "value": "<pathlib._PosixFlavour object at 0x7fd1212d7d30>"
        },
        "_parts": {
         "type": "value",
         "value": "<member '_parts' of 'PurePath' objects>"
        },
        "lstat": {
         "lines": [
          1143,
          1151
         ],
         "summary": "Like stat(), except if the path points to a symlink, the symlink's status information is returned, rather than its target's.",
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "type": "function",
         "fqname": "apidoc.inspector.Path.lstat",
         "doc": []
        },
        "_from_parts": {
         "type": "value",
         "value": "<bound method type._from_parts of <class 'apidoc.path.Path'>>"
        },
        "_parse_args": {
         "type": "value",
         "value": "<bound method type._parse_args of <class 'apidoc.path.Path'>>"
        },
        "group": {
         "lines": [
          1054,
          1060
         ],
         "summary": "Return the group name of the file gid.",
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "type": "function",
         "fqname": "apidoc.inspector.Path.group",
         "doc": []
        },
        "_cparts": {
         "type": "value",
         "value": "<property object at 0x7fd1212d97c8>"
        },
        "_hash": {
         "type": "value",
         "value": "<member '_hash' of 'PurePath' objects>"
        },
        "is_file": {
         "lines": [
          1205,
          1218
         ],
         "summary": "Whether this path is a regular file (also True for symlinks pointing to regular files).",
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "type": "function",
         "fqname": "apidoc.inspector.Path.is_file",
         "doc": []
        },
        "is_symlink": {
         "lines": [
          1219,
          1230
         ],
         "summary": "Whether this path is a symbolic link.",
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "type": "function",
         "fqname": "apidoc.inspector.Path.is_symlink",
         "doc": []
        },
        "_format_parsed_parts": {
         "type": "value",
         "value": "<bound method type._format_parsed_parts of <class 'apidoc.path.Path'>>"
        },
        "absolute": {
         "lines": [
          1002,
          1019
         ],
         "summary": "Return an absolute version of this path.  This function works even if the path doesn't point to anything.",
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "type": "function",
         "fqname": "apidoc.inspector.Path.absolute",
         "doc": [
          "No normalization is done, i.e. all '.' and '..' will be kept along. Use resolve() to get the canonical path to a file."
         ]
        },
        "unlink": {
         "lines": [
          1126,
          1134
         ],
         "summary": "Remove this file or link. If the path is a directory, use rmdir() instead.",
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "type": "function",
         "fqname": "apidoc.inspector.Path.unlink",
         "doc": []
        },
        "is_socket": {
         "lines": [
          1270,
          1282
         ],
         "summary": "Whether this path is a socket.",
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "type": "function",
         "fqname": "apidoc.inspector.Path.is_socket",
         "doc": []
        },
        "drive": {
         "type": "value",
         "value": "<property object at 0x7fd1212d9818>"
        },
        "iterdir": {
         "lines": [
          964,
          977
         ],
         "summary": "Iterate over the files in this directory.  Does not yield any result for the special paths '.' and '..'.",
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "type": "function",
         "fqname": "apidoc.inspector.Path.iterdir",
         "doc": []
        },
        "chmod": {
         "lines": [
          1109,
          1116
         ],
         "summary": "Change the permissions of the path, like os.chmod().",
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          },
          {
           "name": "mode",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "type": "function",
         "fqname": "apidoc.inspector.Path.chmod",
         "doc": []
        },
        "rglob": {
         "lines": [
          990,
          1001
         ],
         "summary": "Recursively yield all existing files (of any kind, including directories) matching the given pattern, anywhere in this subtree.",
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          },
          {
           "name": "pattern",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "type": "function",
         "fqname": "apidoc.inspector.Path.rglob",
         "doc": []
        },
        "_accessor": {
         "type": "value",
         "value": "<member '_accessor' of 'Path' objects>"
        },
        "_str": {
         "type": "value",
         "value": "<member '_str' of 'PurePath' objects>"
        },
        "is_char_device": {
         "lines": [
          1244,
          1256
         ],
         "summary": "Whether this path is a character device.",
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "type": "function",
         "fqname": "apidoc.inspector.Path.is_char_device",
         "doc": []
        },
        "_opener": {
         "type": "function",
         "lines": [
          942,
          945
         ],
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          },
          {
           "name": "name",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          },
          {
           "name": "flags",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          },
          {
           "name": "mode",
           "default": "438",
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "fqname": "apidoc.inspector.Path._opener"
        },
        "as_uri": {
         "lines": [
          649,
          654
         ],
         "summary": "Return the path as a 'file' URI.",
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "type": "function",
         "fqname": "apidoc.inspector.Path.as_uri",
         "doc": []
        }
       },
       "type": "class",
       "bases": [
        "PosixPath"
       ]
      },
      "_inspect_parameter": {
       "type": "function",
       "lines": [
        167,
        175
       ],
       "parameters": [
        {
         "name": "parameter",
         "default": null,
         "annotation": null,
         "kind": "POSITIONAL_OR_KEYWORD"
        }
       ],
       "fqname": "apidoc.inspector._inspect_parameter"
      },
      "modules": {
       "type": "module",
       "name": "modules",
       "path": "/home/samuel/dev/apidoc/src/python/apidoc/modules.py",
       "fqname": "apidoc.modules"
      },
      "inspect": {
       "type": "module",
       "name": "inspect",
       "path": "/home/samuel/sw/Python-3.4.0b3/lib/python3.4/inspect.py",
       "fqname": "inspect"
      },
      "logging": {
       "type": "module",
       "name": "logging",
       "path": "/home/samuel/sw/Python-3.4.0b3/lib/python3.4/logging/__init__.py",
       "fqname": "logging"
      },
      "_inspect_module": {
       "type": "function",
       "lines": [
        90,
        97
       ],
       "parameters": [
        {
         "name": "context",
         "default": null,
         "annotation": null,
         "kind": "POSITIONAL_OR_KEYWORD"
        },
        {
         "name": "fqname",
         "default": null,
         "annotation": null,
         "kind": "POSITIONAL_OR_KEYWORD"
        },
        {
         "name": "module",
         "default": null,
         "annotation": null,
         "kind": "POSITIONAL_OR_KEYWORD"
        }
       ],
       "fqname": "apidoc.inspector._inspect_module"
      },
      "_get_doc": {
       "type": "function",
       "lines": [
        46,
        67
       ],
       "parameters": [
        {
         "name": "obj",
         "default": null,
         "annotation": null,
         "kind": "POSITIONAL_OR_KEYWORD"
        }
       ],
       "fqname": "apidoc.inspector._get_doc"
      },
      "functools": {
       "type": "module",
       "name": "functools",
       "path": "/home/samuel/sw/Python-3.4.0b3/lib/python3.4/functools.py",
       "fqname": "functools"
      },
      "_get_lines": {
       "type": "function",
       "lines": [
        69,
        76
       ],
       "parameters": [
        {
         "name": "obj",
         "default": null,
         "annotation": null,
         "kind": "POSITIONAL_OR_KEYWORD"
        }
       ],
       "fqname": "apidoc.inspector._get_lines"
      },
      "_inspect_class": {
       "type": "function",
       "lines": [
        147,
        165
       ],
       "parameters": [
        {
         "name": "context",
         "default": null,
         "annotation": null,
         "kind": "POSITIONAL_OR_KEYWORD"
        },
        {
         "name": "fqname",
         "default": null,
         "annotation": null,
         "kind": "POSITIONAL_OR_KEYWORD"
        },
        {
         "name": "class_",
         "default": null,
         "annotation": null,
         "kind": "POSITIONAL_OR_KEYWORD"
        }
       ],
       "fqname": "apidoc.inspector._inspect_class"
      },
      "inspect_package": {
       "type": "function",
       "lines": [
        131,
        145
       ],
       "parameters": [
        {
         "name": "context",
         "default": null,
         "annotation": null,
         "kind": "POSITIONAL_OR_KEYWORD"
        },
        {
         "name": "path",
         "default": null,
         "annotation": null,
         "kind": "POSITIONAL_OR_KEYWORD"
        }
       ],
       "fqname": "apidoc.inspector.inspect_package"
      },
      "Context": {
       "lines": [
        29,
        43
       ],
       "mro": [
        "Context",
        "object"
       ],
       "fqname": "apidoc.inspector.Context",
       "dict": {
        "include": {
         "type": "function",
         "lines": [
          35,
          43
         ],
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          },
          {
           "name": "obj",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "fqname": "apidoc.inspector.Context.include"
        }
       },
       "type": "class",
       "bases": [
        "object"
       ]
      },
      "os": {
       "type": "module",
       "name": "os",
       "path": "/home/samuel/sw/Python-3.4.0b3/lib/python3.4/os.py",
       "fqname": "os"
      },
      "json": {
       "type": "module",
       "name": "json",
       "path": "/home/samuel/sw/Python-3.4.0b3/lib/python3.4/json/__init__.py",
       "fqname": "json"
      },
      "_inspect_function": {
       "type": "function",
       "lines": [
        177,
        193
       ],
       "parameters": [
        {
         "name": "context",
         "default": null,
         "annotation": null,
         "kind": "POSITIONAL_OR_KEYWORD"
        },
        {
         "name": "fqname",
         "default": null,
         "annotation": null,
         "kind": "POSITIONAL_OR_KEYWORD"
        },
        {
         "name": "function",
         "default": null,
         "annotation": null,
         "kind": "POSITIONAL_OR_KEYWORD"
        }
       ],
       "fqname": "apidoc.inspector._inspect_function"
      },
      "_inspect_package_or_module": {
       "type": "function",
       "lines": [
        99,
        129
       ],
       "parameters": [
        {
         "name": "context",
         "default": null,
         "annotation": null,
         "kind": "POSITIONAL_OR_KEYWORD"
        },
        {
         "name": "fqname",
         "default": null,
         "annotation": null,
         "kind": "POSITIONAL_OR_KEYWORD"
        },
        {
         "name": "module",
         "default": null,
         "annotation": null,
         "kind": "POSITIONAL_OR_KEYWORD"
        }
       ],
       "fqname": "apidoc.inspector._inspect_package_or_module"
      },
      "is_special_symbol": {
       "type": "function",
       "lines": [
        23,
        25
       ],
       "parameters": [
        {
         "name": "symbol",
         "default": null,
         "annotation": null,
         "kind": "POSITIONAL_OR_KEYWORD"
        }
       ],
       "fqname": "apidoc.inspector.is_special_symbol"
      }
     },
     "type": "module",
     "name": "inspector",
     "summary": "API extraction by importing and inspecting modules.",
     "doc": [
      "Invoke like this:",
      "  python3 -m apidoc.inspector /path/to/package > apidoc.json"
     ]
    },
    "generate": {
     "source": [
      "import logging\n",
      "import pathlib\n",
      "import shutil\n",
      "\n",
      "from   . import base\n",
      "from   .htmlgen import *\n",
      "from   .modules import Name\n",
      "from   .path import Path\n",
      "\n",
      "#-------------------------------------------------------------------------------\n",
      "\n",
      "def wrap_document(ctx, *body, title=None):\n",
      "    stylesheet = get_relative_path(ctx.name, None) / \"apidoc.css\"\n",
      "    head = [LINK(rel=\"stylesheet\", type=\"text/css\", href=stylesheet)]\n",
      "\n",
      "    if title is not None:\n",
      "        head.append(TITLE(title))\n",
      "\n",
      "    return HTML(HEAD(*head), BODY(*body))\n",
      "\n",
      "\n",
      "def gen_doc(doc):\n",
      "    return PRE(doc, class_=\"doc\")\n",
      "\n",
      "\n",
      "def get_relative_path(name0, name1):\n",
      "    parts0 = [] if name0 is None else list(name0)[: -1]\n",
      "    parts1 = [] if name1 is None else list(name1)\n",
      "    # Remove common prefixes.\n",
      "    while len(parts0) > 0 and len(parts1) > 1 and parts0[0] == parts1[0]:\n",
      "        _ = parts0.pop(0)\n",
      "        _ = parts1.pop(0)\n",
      "    return pathlib.PurePosixPath._from_parts([\"..\"] * len(parts0) + parts1)\n",
      "\n",
      "\n",
      "def make_module_link(name, from_name=None):\n",
      "    path = get_relative_path(from_name, name).with_suffix(\".html\")\n",
      "    return A(name, href=path, class_=\"module-link\")\n",
      "\n",
      "\n",
      "#-------------------------------------------------------------------------------\n",
      "\n",
      "class Context(base.Struct(\"modules\", \"name\")):\n",
      "\n",
      "    def __init__(self, modules, **kw_args):\n",
      "        modules = { Name(n): m for n, m in modules.items() }\n",
      "        super(Context, self).__init__(modules=modules, **kw_args)\n",
      "        \n",
      "\n",
      "\n",
      "def gen(ctx, name, info):\n",
      "    fn_name = \"gen_\" + info[\"type\"]\n",
      "    fn = globals()[fn_name]\n",
      "    return fn(ctx, name, info)\n",
      "\n",
      "\n",
      "def gen_module(ctx, name, module):\n",
      "    assert module[\"type\"] == \"module\"\n",
      "\n",
      "    module_name = Name(module[\"name\"])\n",
      "    if module_name in ctx.modules:\n",
      "        module_name = make_module_link(module_name, ctx.name)\n",
      "    return DIV(\n",
      "        \"{} = {} \".format(name, module_name), \n",
      "        class_=\"module-reference\")\n",
      "\n",
      "\n",
      "def gen_function(ctx, name, function):\n",
      "    assert function[\"type\"] == \"function\"\n",
      "    return DIV(\"function \" + name, class_=\"function\")\n",
      "\n",
      "\n",
      "def gen_class(ctx, name, class_):\n",
      "    assert class_[\"type\"] == \"class\"\n",
      "    return DIV(\"class \" + name, class_=\"class\")\n",
      "\n",
      "\n",
      "#-------------------------------------------------------------------------------\n",
      "\n",
      "def generate_module(ctx):\n",
      "    module = ctx.modules[ctx.name]\n",
      "    assert module[\"type\"] == \"module\"\n",
      "\n",
      "    parts = [DIV(ctx.name, class_=\"module-name\")]\n",
      "\n",
      "    doc = module.get(\"doc\", None)\n",
      "    if doc is not None:\n",
      "        parts.append(gen_doc(doc))\n",
      "\n",
      "    contents = {}\n",
      "    for n, v in module.get(\"dict\", {}).items():\n",
      "        contents.setdefault(v[\"type\"], {})[n] = v\n",
      "\n",
      "    def section(name, contents):\n",
      "        contents = ( gen(ctx, n, i) for n, i in sorted(contents.items()) )\n",
      "        return DIV(\n",
      "            SPAN(name, class_=\"module-section-name\"),\n",
      "            *contents,\n",
      "            class_=\"module-section\")\n",
      "\n",
      "    parts.extend((\n",
      "        section(\"Modules\",   contents.pop(\"module\", {})),\n",
      "        section(\"Classes\",   contents.pop(\"class\", {})),\n",
      "        section(\"Functions\", contents.pop(\"function\", {})),\n",
      "        ))\n",
      "    assert len(contents) == 0\n",
      "    return DIV(*parts, class_=\"module\")\n",
      "\n",
      "\n",
      "def write_module_file(ctx, name, path):\n",
      "    ctx = ctx.copy(name=Name(name))\n",
      "    path = Path(path)\n",
      "\n",
      "    logging.debug(\"generating HTML for {}\".format(ctx.name))\n",
      "    html = generate_module(ctx)\n",
      "    html = wrap_document(ctx, html, title=\"module {}\".format(ctx.name))\n",
      "\n",
      "    logging.debug(\"writing HTML to {}\".format(path))\n",
      "    if not path.parent.is_dir():\n",
      "        path.parent.mkdir(parents=True)\n",
      "    with path.open(\"w\") as file:\n",
      "        file.write(html.format())\n",
      "\n",
      "\n",
      "def write_module_files(modules, dir):\n",
      "    ctx = Context(modules=modules)\n",
      "    dir = Path(dir)\n",
      "\n",
      "    index = []\n",
      "\n",
      "    for name in sorted(modules):\n",
      "        name = Name(name)\n",
      "        # FIXME: Duplicated with make_module_link().\n",
      "        path = get_relative_path(None, name).with_suffix(\".html\")\n",
      "        write_module_file(ctx, name, dir / path)\n",
      "\n",
      "        index.append(DIV(make_module_link(name), class_=\"index-entry\"))\n",
      "\n",
      "    index = wrap_document(ctx, DIV(*index, class_=\"module-index\"))\n",
      "    index_path = dir / \"index.html\"\n",
      "    with index_path.open(\"w\") as file:\n",
      "        file.write(index.format())\n",
      "\n",
      "    # Install the stylesheet.\n",
      "    shutil.copy(\n",
      "        str(Path(__file__).parent / \"apidoc.css\"),\n",
      "        str(dir / \"apidoc.css\"))\n",
      "\n",
      "\n",
      "#-------------------------------------------------------------------------------\n",
      "\n",
      "__all__ = (\n",
      "    \"write_module_files\",\n",
      "    )\n",
      "\n"
     ],
     "path": "/home/samuel/dev/apidoc/src/python/apidoc/generate.py",
     "fqname": "apidoc.generate",
     "dict": {
      "Name": {
       "lines": [
        14,
        76
       ],
       "summary": "The fully-qualified name of a Python object.",
       "mro": [
        "Name",
        "object"
       ],
       "fqname": "apidoc.generate.Name",
       "dict": {
        "base": {
         "type": "value",
         "value": "<property object at 0x7fd121274908>"
        },
        "parent": {
         "type": "value",
         "value": "<property object at 0x7fd121274958>"
        }
       },
       "type": "class",
       "bases": [
        "object"
       ],
       "doc": []
      },
      "Path": {
       "lines": [
        16,
        41
       ],
       "mro": [
        "Path",
        "PosixPath",
        "Path",
        "PurePosixPath",
        "PurePath",
        "object"
       ],
       "fqname": "apidoc.generate.Path",
       "dict": {
        "is_absolute": {
         "lines": [
          848,
          854
         ],
         "summary": "True if the path is absolute (has both a root and, if applicable, a drive).",
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "type": "function",
         "fqname": "apidoc.generate.Path.is_absolute",
         "doc": []
        },
        "is_reserved": {
         "lines": [
          855,
          859
         ],
         "summary": "Return True if the path contains one of the special names reserved by the system, if any.",
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "type": "function",
         "fqname": "apidoc.generate.Path.is_reserved",
         "doc": []
        },
        "_raw_open": {
         "lines": [
          946,
          954
         ],
         "summary": "Open the file pointed by this path and return a file descriptor, as os.open() does.",
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          },
          {
           "name": "flags",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          },
          {
           "name": "mode",
           "default": "511",
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "type": "function",
         "fqname": "apidoc.generate.Path._raw_open",
         "doc": []
        },
        "touch": {
         "lines": [
          1072,
          1094
         ],
         "summary": "Create this file with the given access mode, if it doesn't exist.",
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          },
          {
           "name": "mode",
           "default": "438",
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          },
          {
           "name": "exist_ok",
           "default": "True",
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "type": "function",
         "fqname": "apidoc.generate.Path.touch",
         "doc": []
        },
        "relative_to": {
         "lines": [
          775,
          806
         ],
         "summary": "Return the relative path to another path identified by the passed arguments.  If the operation is not possible (because this is not a subpath of the other path), raise ValueError.",
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          },
          {
           "name": "other",
           "default": null,
           "annotation": null,
           "kind": "VAR_POSITIONAL"
          }
         ],
         "type": "function",
         "fqname": "apidoc.generate.Path.relative_to",
         "doc": []
        },
        "_make_child": {
         "type": "function",
         "lines": [
          619,
          624
         ],
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          },
          {
           "name": "args",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "fqname": "apidoc.generate.Path._make_child"
        },
        "_from_parsed_parts": {
         "type": "value",
         "value": "<bound method type._from_parsed_parts of <class 'apidoc.path.Path'>>"
        },
        "is_dir": {
         "lines": [
          1192,
          1204
         ],
         "summary": "Whether this path is a directory.",
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "type": "function",
         "fqname": "apidoc.generate.Path.is_dir",
         "doc": []
        },
        "parts": {
         "type": "value",
         "value": "<property object at 0x7fd1212d9a48>"
        },
        "lchmod": {
         "lines": [
          1117,
          1125
         ],
         "summary": "Like chmod(), except if the path points to a symlink, the symlink's permissions are changed, rather than its target's.",
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          },
          {
           "name": "mode",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "type": "function",
         "fqname": "apidoc.generate.Path.lchmod",
         "doc": []
        },
        "_drv": {
         "type": "value",
         "value": "<member '_drv' of 'PurePath' objects>"
        },
        "with_name": {
         "lines": [
          748,
          754
         ],
         "summary": "Return a new path with the file name changed.",
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          },
          {
           "name": "name",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "type": "function",
         "fqname": "apidoc.generate.Path.with_name",
         "doc": []
        },
        "rename": {
         "lines": [
          1152,
          1159
         ],
         "summary": "Rename this path to the given path.",
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          },
          {
           "name": "target",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "type": "function",
         "fqname": "apidoc.generate.Path.rename",
         "doc": []
        },
        "open": {
         "lines": [
          1061,
          1071
         ],
         "summary": "Open the file pointed by this path and return a file object, as the built-in open() function does.",
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          },
          {
           "name": "mode",
           "default": "'r'",
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          },
          {
           "name": "buffering",
           "default": "-1",
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          },
          {
           "name": "encoding",
           "default": "None",
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          },
          {
           "name": "errors",
           "default": "None",
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          },
          {
           "name": "newline",
           "default": "None",
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "type": "function",
         "fqname": "apidoc.generate.Path.open",
         "doc": []
        },
        "rmdir": {
         "lines": [
          1135,
          1142
         ],
         "summary": "Remove this directory.  The directory must be empty.",
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "type": "function",
         "fqname": "apidoc.generate.Path.rmdir",
         "doc": []
        },
        "stat": {
         "lines": [
          1040,
          1046
         ],
         "summary": "Return the result of the stat() system call on this path, like os.stat() does.",
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "type": "function",
         "fqname": "apidoc.generate.Path.stat",
         "doc": []
        },
        "suffixes": {
         "type": "value",
         "value": "<property object at 0x7fd1212d99a8>"
        },
        "mkdir": {
         "type": "function",
         "lines": [
          1095,
          1108
         ],
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          },
          {
           "name": "mode",
           "default": "511",
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          },
          {
           "name": "parents",
           "default": "False",
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "fqname": "apidoc.generate.Path.mkdir"
        },
        "parents": {
         "type": "value",
         "value": "<property object at 0x7fd1212d9ae8>"
        },
        "match": {
         "lines": [
          860,
          884
         ],
         "summary": "Return True if this path matches the given pattern.",
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          },
          {
           "name": "path_pattern",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "type": "function",
         "fqname": "apidoc.generate.Path.match",
         "doc": []
        },
        "starts_with": {
         "type": "function",
         "lines": [
          39,
          41
         ],
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          },
          {
           "name": "prefix",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "fqname": "apidoc.generate.Path.starts_with"
        },
        "parent": {
         "type": "value",
         "value": "<property object at 0x7fd1212d9a98>"
        },
        "stem": {
         "type": "value",
         "value": "<property object at 0x7fd1212d99f8>"
        },
        "cwd": {
         "type": "value",
         "value": "<bound method type.cwd of <class 'apidoc.path.Path'>>"
        },
        "suffix": {
         "type": "value",
         "value": "<property object at 0x7fd1212d9958>"
        },
        "is_block_device": {
         "lines": [
          1231,
          1243
         ],
         "summary": "Whether this path is a block device.",
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "type": "function",
         "fqname": "apidoc.generate.Path.is_block_device",
         "doc": []
        },
        "root": {
         "type": "value",
         "value": "<property object at 0x7fd1212d9868>"
        },
        "owner": {
         "lines": [
          1047,
          1053
         ],
         "summary": "Return the login name of the file owner.",
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "type": "function",
         "fqname": "apidoc.generate.Path.owner",
         "doc": []
        },
        "joinpath": {
         "lines": [
          819,
          826
         ],
         "summary": "Combine this path with one or several arguments, and return a new path representing either a subpath (if all arguments are relative paths) or a totally different path (if one of the arguments is anchored).",
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          },
          {
           "name": "args",
           "default": null,
           "annotation": null,
           "kind": "VAR_POSITIONAL"
          }
         ],
         "type": "function",
         "fqname": "apidoc.generate.Path.joinpath",
         "doc": []
        },
        "_root": {
         "type": "value",
         "value": "<member '_root' of 'PurePath' objects>"
        },
        "resolve": {
         "lines": [
          1020,
          1039
         ],
         "summary": "Make the path absolute, resolving all symlinks on the way and also normalizing it (for example turning slashes into backslashes under Windows).",
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "type": "function",
         "fqname": "apidoc.generate.Path.resolve",
         "doc": []
        },
        "name": {
         "type": "value",
         "value": "<property object at 0x7fd1212d9908>"
        },
        "glob": {
         "lines": [
          978,
          989
         ],
         "summary": "Iterate over this subtree and yield all existing files (of any kind, including directories) matching the given pattern.",
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          },
          {
           "name": "pattern",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "type": "function",
         "fqname": "apidoc.generate.Path.glob",
         "doc": []
        },
        "with_suffix": {
         "lines": [
          25,
          37
         ],
         "summary": "@todo   This hopefully will not be needed when the base method is fixed.",
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          },
          {
           "name": "suffix",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "type": "function",
         "fqname": "apidoc.generate.Path.with_suffix",
         "doc": []
        },
        "_raise_closed": {
         "type": "function",
         "lines": [
          939,
          941
         ],
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "fqname": "apidoc.generate.Path._raise_closed"
        },
        "_init": {
         "type": "function",
         "lines": [
          915,
          924
         ],
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          },
          {
           "name": "template",
           "default": "None",
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "fqname": "apidoc.generate.Path._init"
        },
        "as_posix": {
         "lines": [
          635,
          640
         ],
         "summary": "Return the string representation of the path with forward (/) slashes.",
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "type": "function",
         "fqname": "apidoc.generate.Path.as_posix",
         "doc": []
        },
        "is_fifo": {
         "lines": [
          1257,
          1269
         ],
         "summary": "Whether this path is a FIFO.",
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "type": "function",
         "fqname": "apidoc.generate.Path.is_fifo",
         "doc": []
        },
        "anchor": {
         "type": "value",
         "value": "<property object at 0x7fd1212d98b8>"
        },
        "_closed": {
         "type": "value",
         "value": "<member '_closed' of 'Path' objects>"
        },
        "_pparts": {
         "type": "value",
         "value": "<member '_pparts' of 'PurePath' objects>"
        },
        "replace": {
         "lines": [
          1160,
          1168
         ],
         "summary": "Rename this path to the given path, clobbering the existing destination if it exists.",
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          },
          {
           "name": "target",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "type": "function",
         "fqname": "apidoc.generate.Path.replace",
         "doc": []
        },
        "_cached_cparts": {
         "type": "value",
         "value": "<member '_cached_cparts' of 'PurePath' objects>"
        },
        "symlink_to": {
         "lines": [
          1169,
          1177
         ],
         "summary": "Make this path a symlink pointing to the given path. Note the order of arguments (self, target) is the reverse of os.symlink's.",
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          },
          {
           "name": "target",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          },
          {
           "name": "target_is_directory",
           "default": "False",
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "type": "function",
         "fqname": "apidoc.generate.Path.symlink_to",
         "doc": []
        },
        "_make_child_relpath": {
         "type": "function",
         "lines": [
          925,
          930
         ],
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          },
          {
           "name": "part",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "fqname": "apidoc.generate.Path._make_child_relpath"
        },
        "exists": {
         "lines": [
          1180,
          1191
         ],
         "summary": "Whether this path exists.",
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "type": "function",
         "fqname": "apidoc.generate.Path.exists",
         "doc": []
        },
        "_flavour": {
         "type": "value",
         "value": "<pathlib._PosixFlavour object at 0x7fd1212d7d30>"
        },
        "_parts": {
         "type": "value",
         "value": "<member '_parts' of 'PurePath' objects>"
        },
        "lstat": {
         "lines": [
          1143,
          1151
         ],
         "summary": "Like stat(), except if the path points to a symlink, the symlink's status information is returned, rather than its target's.",
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "type": "function",
         "fqname": "apidoc.generate.Path.lstat",
         "doc": []
        },
        "_from_parts": {
         "type": "value",
         "value": "<bound method type._from_parts of <class 'apidoc.path.Path'>>"
        },
        "_parse_args": {
         "type": "value",
         "value": "<bound method type._parse_args of <class 'apidoc.path.Path'>>"
        },
        "group": {
         "lines": [
          1054,
          1060
         ],
         "summary": "Return the group name of the file gid.",
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "type": "function",
         "fqname": "apidoc.generate.Path.group",
         "doc": []
        },
        "_cparts": {
         "type": "value",
         "value": "<property object at 0x7fd1212d97c8>"
        },
        "_hash": {
         "type": "value",
         "value": "<member '_hash' of 'PurePath' objects>"
        },
        "is_file": {
         "lines": [
          1205,
          1218
         ],
         "summary": "Whether this path is a regular file (also True for symlinks pointing to regular files).",
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "type": "function",
         "fqname": "apidoc.generate.Path.is_file",
         "doc": []
        },
        "is_symlink": {
         "lines": [
          1219,
          1230
         ],
         "summary": "Whether this path is a symbolic link.",
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "type": "function",
         "fqname": "apidoc.generate.Path.is_symlink",
         "doc": []
        },
        "_format_parsed_parts": {
         "type": "value",
         "value": "<bound method type._format_parsed_parts of <class 'apidoc.path.Path'>>"
        },
        "absolute": {
         "lines": [
          1002,
          1019
         ],
         "summary": "Return an absolute version of this path.  This function works even if the path doesn't point to anything.",
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "type": "function",
         "fqname": "apidoc.generate.Path.absolute",
         "doc": [
          "No normalization is done, i.e. all '.' and '..' will be kept along. Use resolve() to get the canonical path to a file."
         ]
        },
        "unlink": {
         "lines": [
          1126,
          1134
         ],
         "summary": "Remove this file or link. If the path is a directory, use rmdir() instead.",
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "type": "function",
         "fqname": "apidoc.generate.Path.unlink",
         "doc": []
        },
        "is_socket": {
         "lines": [
          1270,
          1282
         ],
         "summary": "Whether this path is a socket.",
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "type": "function",
         "fqname": "apidoc.generate.Path.is_socket",
         "doc": []
        },
        "drive": {
         "type": "value",
         "value": "<property object at 0x7fd1212d9818>"
        },
        "iterdir": {
         "lines": [
          964,
          977
         ],
         "summary": "Iterate over the files in this directory.  Does not yield any result for the special paths '.' and '..'.",
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "type": "function",
         "fqname": "apidoc.generate.Path.iterdir",
         "doc": []
        },
        "chmod": {
         "lines": [
          1109,
          1116
         ],
         "summary": "Change the permissions of the path, like os.chmod().",
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          },
          {
           "name": "mode",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "type": "function",
         "fqname": "apidoc.generate.Path.chmod",
         "doc": []
        },
        "rglob": {
         "lines": [
          990,
          1001
         ],
         "summary": "Recursively yield all existing files (of any kind, including directories) matching the given pattern, anywhere in this subtree.",
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          },
          {
           "name": "pattern",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "type": "function",
         "fqname": "apidoc.generate.Path.rglob",
         "doc": []
        },
        "_accessor": {
         "type": "value",
         "value": "<member '_accessor' of 'Path' objects>"
        },
        "_str": {
         "type": "value",
         "value": "<member '_str' of 'PurePath' objects>"
        },
        "is_char_device": {
         "lines": [
          1244,
          1256
         ],
         "summary": "Whether this path is a character device.",
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "type": "function",
         "fqname": "apidoc.generate.Path.is_char_device",
         "doc": []
        },
        "_opener": {
         "type": "function",
         "lines": [
          942,
          945
         ],
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          },
          {
           "name": "name",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          },
          {
           "name": "flags",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          },
          {
           "name": "mode",
           "default": "438",
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "fqname": "apidoc.generate.Path._opener"
        },
        "as_uri": {
         "lines": [
          649,
          654
         ],
         "summary": "Return the path as a 'file' URI.",
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "type": "function",
         "fqname": "apidoc.generate.Path.as_uri",
         "doc": []
        }
       },
       "type": "class",
       "bases": [
        "PosixPath"
       ]
      },
      "gen_function": {
       "type": "function",
       "lines": [
        68,
        71
       ],
       "parameters": [
        {
         "name": "ctx",
         "default": null,
         "annotation": null,
         "kind": "POSITIONAL_OR_KEYWORD"
        },
        {
         "name": "name",
         "default": null,
         "annotation": null,
         "kind": "POSITIONAL_OR_KEYWORD"
        },
        {
         "name": "function",
         "default": null,
         "annotation": null,
         "kind": "POSITIONAL_OR_KEYWORD"
        }
       ],
       "fqname": "apidoc.generate.gen_function"
      },
      "gen_class": {
       "type": "function",
       "lines": [
        73,
        76
       ],
       "parameters": [
        {
         "name": "ctx",
         "default": null,
         "annotation": null,
         "kind": "POSITIONAL_OR_KEYWORD"
        },
        {
         "name": "name",
         "default": null,
         "annotation": null,
         "kind": "POSITIONAL_OR_KEYWORD"
        },
        {
         "name": "class_",
         "default": null,
         "annotation": null,
         "kind": "POSITIONAL_OR_KEYWORD"
        }
       ],
       "fqname": "apidoc.generate.gen_class"
      },
      "base": {
       "type": "module",
       "name": "base",
       "path": "/home/samuel/dev/apidoc/src/python/apidoc/base.py",
       "fqname": "apidoc.base"
      },
      "write_module_file": {
       "type": "function",
       "lines": [
        110,
        123
       ],
       "parameters": [
        {
         "name": "ctx",
         "default": null,
         "annotation": null,
         "kind": "POSITIONAL_OR_KEYWORD"
        },
        {
         "name": "name",
         "default": null,
         "annotation": null,
         "kind": "POSITIONAL_OR_KEYWORD"
        },
        {
         "name": "path",
         "default": null,
         "annotation": null,
         "kind": "POSITIONAL_OR_KEYWORD"
        }
       ],
       "fqname": "apidoc.generate.write_module_file"
      },
      "shutil": {
       "type": "module",
       "name": "shutil",
       "path": "/home/samuel/sw/Python-3.4.0b3/lib/python3.4/shutil.py",
       "fqname": "shutil"
      },
      "pathlib": {
       "type": "module",
       "name": "pathlib",
       "path": "/home/samuel/sw/Python-3.4.0b3/lib/python3.4/pathlib.py",
       "fqname": "pathlib"
      },
      "LINK": {
       "type": "function",
       "lines": [
        80,
        82
       ],
       "parameters": [
        {
         "name": "children",
         "default": null,
         "annotation": null,
         "kind": "VAR_POSITIONAL"
        },
        {
         "name": "attrs",
         "default": null,
         "annotation": null,
         "kind": "VAR_KEYWORD"
        }
       ],
       "fqname": "apidoc.generate.LINK"
      },
      "Context": {
       "lines": [
        43,
        48
       ],
       "mro": [
        "Context",
        "Struct",
        "BaseStruct",
        "object"
       ],
       "fqname": "apidoc.generate.Context",
       "dict": {
        "name": {
         "type": "value",
         "value": "<member 'name' of 'Struct' objects>"
        },
        "modules": {
         "type": "value",
         "value": "<member 'modules' of 'Struct' objects>"
        },
        "copy": {
         "type": "function",
         "lines": [
          96,
          100
         ],
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          },
          {
           "name": "kw_args",
           "default": null,
           "annotation": null,
           "kind": "VAR_KEYWORD"
          }
         ],
         "fqname": "apidoc.generate.Context.copy"
        }
       },
       "type": "class",
       "bases": [
        "Struct"
       ]
      },
      "LI": {
       "type": "function",
       "lines": [
        80,
        82
       ],
       "parameters": [
        {
         "name": "children",
         "default": null,
         "annotation": null,
         "kind": "VAR_POSITIONAL"
        },
        {
         "name": "attrs",
         "default": null,
         "annotation": null,
         "kind": "VAR_KEYWORD"
        }
       ],
       "fqname": "apidoc.generate.LI"
      },
      "gen": {
       "type": "function",
       "lines": [
        51,
        55
       ],
       "parameters": [
        {
         "name": "ctx",
         "default": null,
         "annotation": null,
         "kind": "POSITIONAL_OR_KEYWORD"
        },
        {
         "name": "name",
         "default": null,
         "annotation": null,
         "kind": "POSITIONAL_OR_KEYWORD"
        },
        {
         "name": "info",
         "default": null,
         "annotation": null,
         "kind": "POSITIONAL_OR_KEYWORD"
        }
       ],
       "fqname": "apidoc.generate.gen"
      },
      "SPAN": {
       "type": "function",
       "lines": [
        80,
        82
       ],
       "parameters": [
        {
         "name": "children",
         "default": null,
         "annotation": null,
         "kind": "VAR_POSITIONAL"
        },
        {
         "name": "attrs",
         "default": null,
         "annotation": null,
         "kind": "VAR_KEYWORD"
        }
       ],
       "fqname": "apidoc.generate.SPAN"
      },
      "write_module_files": {
       "type": "function",
       "lines": [
        125,
        148
       ],
       "parameters": [
        {
         "name": "modules",
         "default": null,
         "annotation": null,
         "kind": "POSITIONAL_OR_KEYWORD"
        },
        {
         "name": "dir",
         "default": null,
         "annotation": null,
         "kind": "POSITIONAL_OR_KEYWORD"
        }
       ],
       "fqname": "apidoc.generate.write_module_files"
      },
      "HTML": {
       "type": "function",
       "lines": [
        80,
        82
       ],
       "parameters": [
        {
         "name": "children",
         "default": null,
         "annotation": null,
         "kind": "VAR_POSITIONAL"
        },
        {
         "name": "attrs",
         "default": null,
         "annotation": null,
         "kind": "VAR_KEYWORD"
        }
       ],
       "fqname": "apidoc.generate.HTML"
      },
      "STYLE": {
       "type": "function",
       "lines": [
        80,
        82
       ],
       "parameters": [
        {
         "name": "children",
         "default": null,
         "annotation": null,
         "kind": "VAR_POSITIONAL"
        },
        {
         "name": "attrs",
         "default": null,
         "annotation": null,
         "kind": "VAR_KEYWORD"
        }
       ],
       "fqname": "apidoc.generate.STYLE"
      },
      "IMG": {
       "type": "function",
       "lines": [
        80,
        82
       ],
       "parameters": [
        {
         "name": "children",
         "default": null,
         "annotation": null,
         "kind": "VAR_POSITIONAL"
        },
        {
         "name": "attrs",
         "default": null,
         "annotation": null,
         "kind": "VAR_KEYWORD"
        }
       ],
       "fqname": "apidoc.generate.IMG"
      },
      "Element": {
       "lines": [
        24,
        74
       ],
       "mro": [
        "Element",
        "object"
       ],
       "fqname": "apidoc.generate.Element",
       "dict": {
        "attrs": {
         "type": "value",
         "value": "<property object at 0x7fd120feaa98>"
        },
        "children": {
         "type": "value",
         "value": "<property object at 0x7fd12105eea8>"
        },
        "format": {
         "type": "function",
         "lines": [
          72,
          74
         ],
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          },
          {
           "name": "terminator",
           "default": "'\\n'",
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          },
          {
           "name": "indent",
           "default": "' '",
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          },
          {
           "name": "depth",
           "default": "0",
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "fqname": "apidoc.generate.Element.format"
        },
        "generate": {
         "type": "function",
         "lines": [
          61,
          70
         ],
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          },
          {
           "name": "terminator",
           "default": "''",
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          },
          {
           "name": "indent",
           "default": "''",
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          },
          {
           "name": "depth",
           "default": "0",
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "fqname": "apidoc.generate.Element.generate"
        }
       },
       "type": "class",
       "bases": [
        "object"
       ]
      },
      "EM": {
       "type": "function",
       "lines": [
        80,
        82
       ],
       "parameters": [
        {
         "name": "children",
         "default": null,
         "annotation": null,
         "kind": "VAR_POSITIONAL"
        },
        {
         "name": "attrs",
         "default": null,
         "annotation": null,
         "kind": "VAR_KEYWORD"
        }
       ],
       "fqname": "apidoc.generate.EM"
      },
      "UL": {
       "type": "function",
       "lines": [
        80,
        82
       ],
       "parameters": [
        {
         "name": "children",
         "default": null,
         "annotation": null,
         "kind": "VAR_POSITIONAL"
        },
        {
         "name": "attrs",
         "default": null,
         "annotation": null,
         "kind": "VAR_KEYWORD"
        }
       ],
       "fqname": "apidoc.generate.UL"
      },
      "HEAD": {
       "type": "function",
       "lines": [
        80,
        82
       ],
       "parameters": [
        {
         "name": "children",
         "default": null,
         "annotation": null,
         "kind": "VAR_POSITIONAL"
        },
        {
         "name": "attrs",
         "default": null,
         "annotation": null,
         "kind": "VAR_KEYWORD"
        }
       ],
       "fqname": "apidoc.generate.HEAD"
      },
      "wrap_document": {
       "type": "function",
       "lines": [
        12,
        20
       ],
       "parameters": [
        {
         "name": "ctx",
         "default": null,
         "annotation": null,
         "kind": "POSITIONAL_OR_KEYWORD"
        },
        {
         "name": "body",
         "default": null,
         "annotation": null,
         "kind": "VAR_POSITIONAL"
        },
        {
         "name": "title",
         "default": "None",
         "annotation": null,
         "kind": "KEYWORD_ONLY"
        }
       ],
       "fqname": "apidoc.generate.wrap_document"
      },
      "BODY": {
       "type": "function",
       "lines": [
        80,
        82
       ],
       "parameters": [
        {
         "name": "children",
         "default": null,
         "annotation": null,
         "kind": "VAR_POSITIONAL"
        },
        {
         "name": "attrs",
         "default": null,
         "annotation": null,
         "kind": "VAR_KEYWORD"
        }
       ],
       "fqname": "apidoc.generate.BODY"
      },
      "logging": {
       "type": "module",
       "name": "logging",
       "path": "/home/samuel/sw/Python-3.4.0b3/lib/python3.4/logging/__init__.py",
       "fqname": "logging"
      },
      "get_relative_path": {
       "type": "function",
       "lines": [
        26,
        34
       ],
       "parameters": [
        {
         "name": "name0",
         "default": null,
         "annotation": null,
         "kind": "POSITIONAL_OR_KEYWORD"
        },
        {
         "name": "name1",
         "default": null,
         "annotation": null,
         "kind": "POSITIONAL_OR_KEYWORD"
        }
       ],
       "fqname": "apidoc.generate.get_relative_path"
      },
      "gen_doc": {
       "type": "function",
       "lines": [
        22,
        24
       ],
       "parameters": [
        {
         "name": "doc",
         "default": null,
         "annotation": null,
         "kind": "POSITIONAL_OR_KEYWORD"
        }
       ],
       "fqname": "apidoc.generate.gen_doc"
      },
      "gen_module": {
       "type": "function",
       "lines": [
        57,
        66
       ],
       "parameters": [
        {
         "name": "ctx",
         "default": null,
         "annotation": null,
         "kind": "POSITIONAL_OR_KEYWORD"
        },
        {
         "name": "name",
         "default": null,
         "annotation": null,
         "kind": "POSITIONAL_OR_KEYWORD"
        },
        {
         "name": "module",
         "default": null,
         "annotation": null,
         "kind": "POSITIONAL_OR_KEYWORD"
        }
       ],
       "fqname": "apidoc.generate.gen_module"
      },
      "PRE": {
       "type": "function",
       "lines": [
        80,
        82
       ],
       "parameters": [
        {
         "name": "children",
         "default": null,
         "annotation": null,
         "kind": "VAR_POSITIONAL"
        },
        {
         "name": "attrs",
         "default": null,
         "annotation": null,
         "kind": "VAR_KEYWORD"
        }
       ],
       "fqname": "apidoc.generate.PRE"
      },
      "A": {
       "type": "function",
       "lines": [
        80,
        82
       ],
       "parameters": [
        {
         "name": "children",
         "default": null,
         "annotation": null,
         "kind": "VAR_POSITIONAL"
        },
        {
         "name": "attrs",
         "default": null,
         "annotation": null,
         "kind": "VAR_KEYWORD"
        }
       ],
       "fqname": "apidoc.generate.A"
      },
      "SCRIPT": {
       "type": "function",
       "lines": [
        80,
        82
       ],
       "parameters": [
        {
         "name": "children",
         "default": null,
         "annotation": null,
         "kind": "VAR_POSITIONAL"
        },
        {
         "name": "attrs",
         "default": null,
         "annotation": null,
         "kind": "VAR_KEYWORD"
        }
       ],
       "fqname": "apidoc.generate.SCRIPT"
      },
      "TITLE": {
       "type": "function",
       "lines": [
        80,
        82
       ],
       "parameters": [
        {
         "name": "children",
         "default": null,
         "annotation": null,
         "kind": "VAR_POSITIONAL"
        },
        {
         "name": "attrs",
         "default": null,
         "annotation": null,
         "kind": "VAR_KEYWORD"
        }
       ],
       "fqname": "apidoc.generate.TITLE"
      },
      "P": {
       "type": "function",
       "lines": [
        80,
        82
       ],
       "parameters": [
        {
         "name": "children",
         "default": null,
         "annotation": null,
         "kind": "VAR_POSITIONAL"
        },
        {
         "name": "attrs",
         "default": null,
         "annotation": null,
         "kind": "VAR_KEYWORD"
        }
       ],
       "fqname": "apidoc.generate.P"
      },
      "DIV": {
       "type": "function",
       "lines": [
        80,
        82
       ],
       "parameters": [
        {
         "name": "children",
         "default": null,
         "annotation": null,
         "kind": "VAR_POSITIONAL"
        },
        {
         "name": "attrs",
         "default": null,
         "annotation": null,
         "kind": "VAR_KEYWORD"
        }
       ],
       "fqname": "apidoc.generate.DIV"
      },
      "OL": {
       "type": "function",
       "lines": [
        80,
        82
       ],
       "parameters": [
        {
         "name": "children",
         "default": null,
         "annotation": null,
         "kind": "VAR_POSITIONAL"
        },
        {
         "name": "attrs",
         "default": null,
         "annotation": null,
         "kind": "VAR_KEYWORD"
        }
       ],
       "fqname": "apidoc.generate.OL"
      },
      "generate_module": {
       "type": "function",
       "lines": [
        80,
        108
       ],
       "parameters": [
        {
         "name": "ctx",
         "default": null,
         "annotation": null,
         "kind": "POSITIONAL_OR_KEYWORD"
        }
       ],
       "fqname": "apidoc.generate.generate_module"
      },
      "make_module_link": {
       "type": "function",
       "lines": [
        36,
        39
       ],
       "parameters": [
        {
         "name": "name",
         "default": null,
         "annotation": null,
         "kind": "POSITIONAL_OR_KEYWORD"
        },
        {
         "name": "from_name",
         "default": "None",
         "annotation": null,
         "kind": "POSITIONAL_OR_KEYWORD"
        }
       ],
       "fqname": "apidoc.generate.make_module_link"
      }
     },
     "type": "module",
     "name": "generate"
    },
    "modules": {
     "source": [
      "import functools\n",
      "import importlib\n",
      "from   importlib.machinery import SourceFileLoader\n",
      "import logging\n",
      "import os\n",
      "import sys\n",
      "import types\n",
      "\n",
      "from   apidoc.path import Path\n",
      "\n",
      "#-------------------------------------------------------------------------------\n",
      "\n",
      "@functools.total_ordering\n",
      "class Name:\n",
      "    \"\"\"\n",
      "    The fully-qualified name of a Python object.\n",
      "    \"\"\"\n",
      "\n",
      "    def __init__(self, parts):\n",
      "        if isinstance(parts, str):\n",
      "            parts = tuple(parts.split(\".\"))\n",
      "        else:\n",
      "            parts = tuple(parts)\n",
      "        assert len(parts) > 0\n",
      "        self.__parts = parts\n",
      "\n",
      "\n",
      "    def __str__(self):\n",
      "        return \".\".join(self.__parts)\n",
      "\n",
      "\n",
      "    def __repr__(self):\n",
      "        return \"{}({})\".format(\n",
      "            self.__class__.__name__, \n",
      "            \", \".join( repr(p) for p in self.__parts ))\n",
      "\n",
      "\n",
      "    def __eq__(self, other):\n",
      "        return str(self) == str(other)\n",
      "\n",
      "\n",
      "    def __le__(self, other):\n",
      "        return str(self) < str(other)\n",
      "\n",
      "\n",
      "    def __hash__(self):\n",
      "        return hash(self.__parts)\n",
      "\n",
      "\n",
      "    def __len__(self):\n",
      "        return len(self.__parts)\n",
      "\n",
      "\n",
      "    def __iter__(self):\n",
      "        return iter(self.__parts)\n",
      "\n",
      "\n",
      "    def __getitem__(self, index):\n",
      "        return self.__parts[index]\n",
      "\n",
      "\n",
      "    @property\n",
      "    def base(self):\n",
      "        return self.__parts[-1]\n",
      "\n",
      "\n",
      "    @property\n",
      "    def parent(self):\n",
      "        if len(self.__parts) == 1:\n",
      "            raise AttributeError(\"name '{}' has no parent\".format(self))\n",
      "        return self.__class__(self.__parts[: -1])\n",
      "\n",
      "\n",
      "    def __add__(self, part):\n",
      "        return self.__class__(self.__parts + (part, ))\n",
      "\n",
      "\n",
      "\n",
      "def get_module_name_from_path(path, base_path):\n",
      "    \"\"\"\n",
      "    Constructs the name of a module from its path relative to the import path.\n",
      "    \"\"\"\n",
      "    path = Path(path)\n",
      "    base_path = Path(base_path)\n",
      "    parts = path.with_suffix(None).relative_to(base_path).parts\n",
      "    return Name(parts)\n",
      "    \n",
      "\n",
      "# FIXME: Don't rely on the module in the path.\n",
      "def import_module_from_filename(path):\n",
      "    path = Path(path)\n",
      "    if path.is_dir():\n",
      "        # FIXME: Is this general?  Is this right?\n",
      "        path = path / \"__init__.py\"\n",
      "\n",
      "    for load_path in sys.path:\n",
      "        try:\n",
      "            relative = path.with_suffix(\"\").relative_to(load_path)\n",
      "        except ValueError:\n",
      "            pass\n",
      "        else:\n",
      "            name = Name(relative.parts)\n",
      "            module = importlib.import_module(str(name))\n",
      "            if Path(module.__file__) == path:\n",
      "                return name, module\n",
      "            else:\n",
      "                logging.warning(\n",
      "                    \"module {} imports from {}, not expected {}\".format(\n",
      "                        name, module.__file__, path))\n",
      "    raise RuntimeError(\"{} is not in the Python path\".format(path))\n",
      "\n",
      "\n",
      "def is_package(obj):\n",
      "    return isinstance(obj, types.ModuleType) and obj.__name__ == obj.__package__\n",
      "\n",
      "\n",
      "def is_package_dir(path):\n",
      "    \"\"\"\n",
      "    Returns true if 'path' is a package directory.\n",
      "    \"\"\"\n",
      "    path = Path(path)\n",
      "    return path.is_dir() and (path / \"__init__.py\").exists()\n",
      "\n",
      "\n",
      "def enumerate_package(path):\n",
      "    \"\"\"\n",
      "    Generates subpackages and modules under a top-level package.\n",
      "    \"\"\"\n",
      "    path = Path(path)\n",
      "    if not is_package_dir(path):\n",
      "        raise ValueError(\"{} is not a package dir\".format(path))\n",
      "\n",
      "    # The import base is the parent of the top-level package.\n",
      "    base_path = path.parent\n",
      "\n",
      "    def enumerate(path):\n",
      "        yield get_module_name_from_path(path, base_path), path / \"__init__.py\"\n",
      "        for sub_path in path.iterdir():\n",
      "            if sub_path.suffix == \".py\" and sub_path.stem != \"__init__\":\n",
      "                yield get_module_name_from_path(sub_path, base_path), sub_path\n",
      "            elif is_package_dir(sub_path):\n",
      "                yield from enumerate(sub_path)\n",
      "    \n",
      "    return enumerate(path)\n",
      "\n",
      "\n",
      "def get_submodules(package):\n",
      "    if not is_package(package):\n",
      "        raise TypeError(\"not a package\")\n",
      "\n",
      "    fqname = Name(package.__name__)\n",
      "    package_dir = Path(package.__file__).parent\n",
      "\n",
      "    for sub_path in package_dir.iterdir():\n",
      "        name = sub_path.stem\n",
      "        if sub_path.suffix == \".py\" and name != \"__init__\":\n",
      "            yield name, load_module(fqname + name, sub_path)\n",
      "\n",
      "\n",
      "def load_module(name, path):\n",
      "    logging.info(\"loading {} from {}\".format(name, path))\n",
      "    module = SourceFileLoader(str(name), str(path)).load_module()\n",
      "    if len(name) > 1:\n",
      "        parent_name = Name(name[: -1])\n",
      "        parent = sys.modules[str(parent_name)]\n",
      "        setattr(parent, name[-1], module)\n",
      "    return module\n",
      "\n",
      "\n",
      "#-------------------------------------------------------------------------------\n",
      "\n",
      "if __name__ == \"__main__\":\n",
      "    # Remove this module's directory from the load path.\n",
      "    sys.path.remove(os.path.dirname(os.path.realpath(sys.argv[0])))\n",
      "\n",
      "    pkg = Path(sys.argv[1])\n",
      "    top = pkg.parent\n",
      "\n",
      "    for name, path in enumerate_package(pkg):\n",
      "        print(\"{!s:24} -> {}\".format(name, path))\n",
      "\n",
      "        module = SourceFileLoader(str(name), str(path)).load_module()\n",
      "        print(module)\n",
      "\n",
      "\n"
     ],
     "path": "/home/samuel/dev/apidoc/src/python/apidoc/modules.py",
     "fqname": "apidoc.modules",
     "dict": {
      "load_module": {
       "type": "function",
       "lines": [
        160,
        168
       ],
       "parameters": [
        {
         "name": "name",
         "default": null,
         "annotation": null,
         "kind": "POSITIONAL_OR_KEYWORD"
        },
        {
         "name": "path",
         "default": null,
         "annotation": null,
         "kind": "POSITIONAL_OR_KEYWORD"
        }
       ],
       "fqname": "apidoc.modules.load_module"
      },
      "functools": {
       "type": "module",
       "name": "functools",
       "path": "/home/samuel/sw/Python-3.4.0b3/lib/python3.4/functools.py",
       "fqname": "functools"
      },
      "Name": {
       "lines": [
        14,
        76
       ],
       "summary": "The fully-qualified name of a Python object.",
       "mro": [
        "Name",
        "object"
       ],
       "fqname": "apidoc.modules.Name",
       "dict": {
        "base": {
         "type": "value",
         "value": "<property object at 0x7fd121274908>"
        },
        "parent": {
         "type": "value",
         "value": "<property object at 0x7fd121274958>"
        }
       },
       "type": "class",
       "bases": [
        "object"
       ],
       "doc": []
      },
      "Path": {
       "lines": [
        16,
        41
       ],
       "mro": [
        "Path",
        "PosixPath",
        "Path",
        "PurePosixPath",
        "PurePath",
        "object"
       ],
       "fqname": "apidoc.modules.Path",
       "dict": {
        "is_absolute": {
         "lines": [
          848,
          854
         ],
         "summary": "True if the path is absolute (has both a root and, if applicable, a drive).",
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "type": "function",
         "fqname": "apidoc.modules.Path.is_absolute",
         "doc": []
        },
        "is_reserved": {
         "lines": [
          855,
          859
         ],
         "summary": "Return True if the path contains one of the special names reserved by the system, if any.",
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "type": "function",
         "fqname": "apidoc.modules.Path.is_reserved",
         "doc": []
        },
        "_raw_open": {
         "lines": [
          946,
          954
         ],
         "summary": "Open the file pointed by this path and return a file descriptor, as os.open() does.",
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          },
          {
           "name": "flags",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          },
          {
           "name": "mode",
           "default": "511",
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "type": "function",
         "fqname": "apidoc.modules.Path._raw_open",
         "doc": []
        },
        "touch": {
         "lines": [
          1072,
          1094
         ],
         "summary": "Create this file with the given access mode, if it doesn't exist.",
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          },
          {
           "name": "mode",
           "default": "438",
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          },
          {
           "name": "exist_ok",
           "default": "True",
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "type": "function",
         "fqname": "apidoc.modules.Path.touch",
         "doc": []
        },
        "relative_to": {
         "lines": [
          775,
          806
         ],
         "summary": "Return the relative path to another path identified by the passed arguments.  If the operation is not possible (because this is not a subpath of the other path), raise ValueError.",
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          },
          {
           "name": "other",
           "default": null,
           "annotation": null,
           "kind": "VAR_POSITIONAL"
          }
         ],
         "type": "function",
         "fqname": "apidoc.modules.Path.relative_to",
         "doc": []
        },
        "_make_child": {
         "type": "function",
         "lines": [
          619,
          624
         ],
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          },
          {
           "name": "args",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "fqname": "apidoc.modules.Path._make_child"
        },
        "_from_parsed_parts": {
         "type": "value",
         "value": "<bound method type._from_parsed_parts of <class 'apidoc.path.Path'>>"
        },
        "is_dir": {
         "lines": [
          1192,
          1204
         ],
         "summary": "Whether this path is a directory.",
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "type": "function",
         "fqname": "apidoc.modules.Path.is_dir",
         "doc": []
        },
        "parts": {
         "type": "value",
         "value": "<property object at 0x7fd1212d9a48>"
        },
        "lchmod": {
         "lines": [
          1117,
          1125
         ],
         "summary": "Like chmod(), except if the path points to a symlink, the symlink's permissions are changed, rather than its target's.",
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          },
          {
           "name": "mode",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "type": "function",
         "fqname": "apidoc.modules.Path.lchmod",
         "doc": []
        },
        "_drv": {
         "type": "value",
         "value": "<member '_drv' of 'PurePath' objects>"
        },
        "with_name": {
         "lines": [
          748,
          754
         ],
         "summary": "Return a new path with the file name changed.",
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          },
          {
           "name": "name",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "type": "function",
         "fqname": "apidoc.modules.Path.with_name",
         "doc": []
        },
        "rename": {
         "lines": [
          1152,
          1159
         ],
         "summary": "Rename this path to the given path.",
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          },
          {
           "name": "target",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "type": "function",
         "fqname": "apidoc.modules.Path.rename",
         "doc": []
        },
        "open": {
         "lines": [
          1061,
          1071
         ],
         "summary": "Open the file pointed by this path and return a file object, as the built-in open() function does.",
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          },
          {
           "name": "mode",
           "default": "'r'",
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          },
          {
           "name": "buffering",
           "default": "-1",
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          },
          {
           "name": "encoding",
           "default": "None",
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          },
          {
           "name": "errors",
           "default": "None",
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          },
          {
           "name": "newline",
           "default": "None",
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "type": "function",
         "fqname": "apidoc.modules.Path.open",
         "doc": []
        },
        "rmdir": {
         "lines": [
          1135,
          1142
         ],
         "summary": "Remove this directory.  The directory must be empty.",
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "type": "function",
         "fqname": "apidoc.modules.Path.rmdir",
         "doc": []
        },
        "stat": {
         "lines": [
          1040,
          1046
         ],
         "summary": "Return the result of the stat() system call on this path, like os.stat() does.",
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "type": "function",
         "fqname": "apidoc.modules.Path.stat",
         "doc": []
        },
        "suffixes": {
         "type": "value",
         "value": "<property object at 0x7fd1212d99a8>"
        },
        "mkdir": {
         "type": "function",
         "lines": [
          1095,
          1108
         ],
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          },
          {
           "name": "mode",
           "default": "511",
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          },
          {
           "name": "parents",
           "default": "False",
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "fqname": "apidoc.modules.Path.mkdir"
        },
        "parents": {
         "type": "value",
         "value": "<property object at 0x7fd1212d9ae8>"
        },
        "match": {
         "lines": [
          860,
          884
         ],
         "summary": "Return True if this path matches the given pattern.",
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          },
          {
           "name": "path_pattern",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "type": "function",
         "fqname": "apidoc.modules.Path.match",
         "doc": []
        },
        "starts_with": {
         "type": "function",
         "lines": [
          39,
          41
         ],
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          },
          {
           "name": "prefix",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "fqname": "apidoc.modules.Path.starts_with"
        },
        "parent": {
         "type": "value",
         "value": "<property object at 0x7fd1212d9a98>"
        },
        "stem": {
         "type": "value",
         "value": "<property object at 0x7fd1212d99f8>"
        },
        "cwd": {
         "type": "value",
         "value": "<bound method type.cwd of <class 'apidoc.path.Path'>>"
        },
        "suffix": {
         "type": "value",
         "value": "<property object at 0x7fd1212d9958>"
        },
        "is_block_device": {
         "lines": [
          1231,
          1243
         ],
         "summary": "Whether this path is a block device.",
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "type": "function",
         "fqname": "apidoc.modules.Path.is_block_device",
         "doc": []
        },
        "root": {
         "type": "value",
         "value": "<property object at 0x7fd1212d9868>"
        },
        "owner": {
         "lines": [
          1047,
          1053
         ],
         "summary": "Return the login name of the file owner.",
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "type": "function",
         "fqname": "apidoc.modules.Path.owner",
         "doc": []
        },
        "joinpath": {
         "lines": [
          819,
          826
         ],
         "summary": "Combine this path with one or several arguments, and return a new path representing either a subpath (if all arguments are relative paths) or a totally different path (if one of the arguments is anchored).",
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          },
          {
           "name": "args",
           "default": null,
           "annotation": null,
           "kind": "VAR_POSITIONAL"
          }
         ],
         "type": "function",
         "fqname": "apidoc.modules.Path.joinpath",
         "doc": []
        },
        "_root": {
         "type": "value",
         "value": "<member '_root' of 'PurePath' objects>"
        },
        "resolve": {
         "lines": [
          1020,
          1039
         ],
         "summary": "Make the path absolute, resolving all symlinks on the way and also normalizing it (for example turning slashes into backslashes under Windows).",
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "type": "function",
         "fqname": "apidoc.modules.Path.resolve",
         "doc": []
        },
        "name": {
         "type": "value",
         "value": "<property object at 0x7fd1212d9908>"
        },
        "glob": {
         "lines": [
          978,
          989
         ],
         "summary": "Iterate over this subtree and yield all existing files (of any kind, including directories) matching the given pattern.",
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          },
          {
           "name": "pattern",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "type": "function",
         "fqname": "apidoc.modules.Path.glob",
         "doc": []
        },
        "with_suffix": {
         "lines": [
          25,
          37
         ],
         "summary": "@todo   This hopefully will not be needed when the base method is fixed.",
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          },
          {
           "name": "suffix",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "type": "function",
         "fqname": "apidoc.modules.Path.with_suffix",
         "doc": []
        },
        "_raise_closed": {
         "type": "function",
         "lines": [
          939,
          941
         ],
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "fqname": "apidoc.modules.Path._raise_closed"
        },
        "_init": {
         "type": "function",
         "lines": [
          915,
          924
         ],
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          },
          {
           "name": "template",
           "default": "None",
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "fqname": "apidoc.modules.Path._init"
        },
        "as_posix": {
         "lines": [
          635,
          640
         ],
         "summary": "Return the string representation of the path with forward (/) slashes.",
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "type": "function",
         "fqname": "apidoc.modules.Path.as_posix",
         "doc": []
        },
        "is_fifo": {
         "lines": [
          1257,
          1269
         ],
         "summary": "Whether this path is a FIFO.",
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "type": "function",
         "fqname": "apidoc.modules.Path.is_fifo",
         "doc": []
        },
        "anchor": {
         "type": "value",
         "value": "<property object at 0x7fd1212d98b8>"
        },
        "_closed": {
         "type": "value",
         "value": "<member '_closed' of 'Path' objects>"
        },
        "_pparts": {
         "type": "value",
         "value": "<member '_pparts' of 'PurePath' objects>"
        },
        "replace": {
         "lines": [
          1160,
          1168
         ],
         "summary": "Rename this path to the given path, clobbering the existing destination if it exists.",
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          },
          {
           "name": "target",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "type": "function",
         "fqname": "apidoc.modules.Path.replace",
         "doc": []
        },
        "_cached_cparts": {
         "type": "value",
         "value": "<member '_cached_cparts' of 'PurePath' objects>"
        },
        "symlink_to": {
         "lines": [
          1169,
          1177
         ],
         "summary": "Make this path a symlink pointing to the given path. Note the order of arguments (self, target) is the reverse of os.symlink's.",
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          },
          {
           "name": "target",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          },
          {
           "name": "target_is_directory",
           "default": "False",
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "type": "function",
         "fqname": "apidoc.modules.Path.symlink_to",
         "doc": []
        },
        "_make_child_relpath": {
         "type": "function",
         "lines": [
          925,
          930
         ],
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          },
          {
           "name": "part",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "fqname": "apidoc.modules.Path._make_child_relpath"
        },
        "exists": {
         "lines": [
          1180,
          1191
         ],
         "summary": "Whether this path exists.",
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "type": "function",
         "fqname": "apidoc.modules.Path.exists",
         "doc": []
        },
        "_flavour": {
         "type": "value",
         "value": "<pathlib._PosixFlavour object at 0x7fd1212d7d30>"
        },
        "_parts": {
         "type": "value",
         "value": "<member '_parts' of 'PurePath' objects>"
        },
        "lstat": {
         "lines": [
          1143,
          1151
         ],
         "summary": "Like stat(), except if the path points to a symlink, the symlink's status information is returned, rather than its target's.",
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "type": "function",
         "fqname": "apidoc.modules.Path.lstat",
         "doc": []
        },
        "_from_parts": {
         "type": "value",
         "value": "<bound method type._from_parts of <class 'apidoc.path.Path'>>"
        },
        "_parse_args": {
         "type": "value",
         "value": "<bound method type._parse_args of <class 'apidoc.path.Path'>>"
        },
        "group": {
         "lines": [
          1054,
          1060
         ],
         "summary": "Return the group name of the file gid.",
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "type": "function",
         "fqname": "apidoc.modules.Path.group",
         "doc": []
        },
        "_cparts": {
         "type": "value",
         "value": "<property object at 0x7fd1212d97c8>"
        },
        "_hash": {
         "type": "value",
         "value": "<member '_hash' of 'PurePath' objects>"
        },
        "is_file": {
         "lines": [
          1205,
          1218
         ],
         "summary": "Whether this path is a regular file (also True for symlinks pointing to regular files).",
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "type": "function",
         "fqname": "apidoc.modules.Path.is_file",
         "doc": []
        },
        "is_symlink": {
         "lines": [
          1219,
          1230
         ],
         "summary": "Whether this path is a symbolic link.",
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "type": "function",
         "fqname": "apidoc.modules.Path.is_symlink",
         "doc": []
        },
        "_format_parsed_parts": {
         "type": "value",
         "value": "<bound method type._format_parsed_parts of <class 'apidoc.path.Path'>>"
        },
        "absolute": {
         "lines": [
          1002,
          1019
         ],
         "summary": "Return an absolute version of this path.  This function works even if the path doesn't point to anything.",
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "type": "function",
         "fqname": "apidoc.modules.Path.absolute",
         "doc": [
          "No normalization is done, i.e. all '.' and '..' will be kept along. Use resolve() to get the canonical path to a file."
         ]
        },
        "unlink": {
         "lines": [
          1126,
          1134
         ],
         "summary": "Remove this file or link. If the path is a directory, use rmdir() instead.",
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "type": "function",
         "fqname": "apidoc.modules.Path.unlink",
         "doc": []
        },
        "is_socket": {
         "lines": [
          1270,
          1282
         ],
         "summary": "Whether this path is a socket.",
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "type": "function",
         "fqname": "apidoc.modules.Path.is_socket",
         "doc": []
        },
        "drive": {
         "type": "value",
         "value": "<property object at 0x7fd1212d9818>"
        },
        "iterdir": {
         "lines": [
          964,
          977
         ],
         "summary": "Iterate over the files in this directory.  Does not yield any result for the special paths '.' and '..'.",
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "type": "function",
         "fqname": "apidoc.modules.Path.iterdir",
         "doc": []
        },
        "chmod": {
         "lines": [
          1109,
          1116
         ],
         "summary": "Change the permissions of the path, like os.chmod().",
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          },
          {
           "name": "mode",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "type": "function",
         "fqname": "apidoc.modules.Path.chmod",
         "doc": []
        },
        "rglob": {
         "lines": [
          990,
          1001
         ],
         "summary": "Recursively yield all existing files (of any kind, including directories) matching the given pattern, anywhere in this subtree.",
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          },
          {
           "name": "pattern",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "type": "function",
         "fqname": "apidoc.modules.Path.rglob",
         "doc": []
        },
        "_accessor": {
         "type": "value",
         "value": "<member '_accessor' of 'Path' objects>"
        },
        "_str": {
         "type": "value",
         "value": "<member '_str' of 'PurePath' objects>"
        },
        "is_char_device": {
         "lines": [
          1244,
          1256
         ],
         "summary": "Whether this path is a character device.",
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "type": "function",
         "fqname": "apidoc.modules.Path.is_char_device",
         "doc": []
        },
        "_opener": {
         "type": "function",
         "lines": [
          942,
          945
         ],
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          },
          {
           "name": "name",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          },
          {
           "name": "flags",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          },
          {
           "name": "mode",
           "default": "438",
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "fqname": "apidoc.modules.Path._opener"
        },
        "as_uri": {
         "lines": [
          649,
          654
         ],
         "summary": "Return the path as a 'file' URI.",
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "type": "function",
         "fqname": "apidoc.modules.Path.as_uri",
         "doc": []
        }
       },
       "type": "class",
       "bases": [
        "PosixPath"
       ]
      },
      "get_module_name_from_path": {
       "lines": [
        79,
        87
       ],
       "summary": "Constructs the name of a module from its path relative to the import path.",
       "parameters": [
        {
         "name": "path",
         "default": null,
         "annotation": null,
         "kind": "POSITIONAL_OR_KEYWORD"
        },
        {
         "name": "base_path",
         "default": null,
         "annotation": null,
         "kind": "POSITIONAL_OR_KEYWORD"
        }
       ],
       "type": "function",
       "fqname": "apidoc.modules.get_module_name_from_path",
       "doc": []
      },
      "enumerate_package": {
       "lines": [
        125,
        145
       ],
       "summary": "Generates subpackages and modules under a top-level package.",
       "parameters": [
        {
         "name": "path",
         "default": null,
         "annotation": null,
         "kind": "POSITIONAL_OR_KEYWORD"
        }
       ],
       "type": "function",
       "fqname": "apidoc.modules.enumerate_package",
       "doc": []
      },
      "import_module_from_filename": {
       "type": "function",
       "lines": [
        90,
        111
       ],
       "parameters": [
        {
         "name": "path",
         "default": null,
         "annotation": null,
         "kind": "POSITIONAL_OR_KEYWORD"
        }
       ],
       "fqname": "apidoc.modules.import_module_from_filename"
      },
      "get_submodules": {
       "type": "function",
       "lines": [
        147,
        158
       ],
       "parameters": [
        {
         "name": "package",
         "default": null,
         "annotation": null,
         "kind": "POSITIONAL_OR_KEYWORD"
        }
       ],
       "fqname": "apidoc.modules.get_submodules"
      },
      "SourceFileLoader": {
       "lines": [
        1603,
        1644
       ],
       "summary": "Concrete implementation of SourceLoader using the file system.",
       "mro": [
        "SourceFileLoader",
        "FileLoader",
        "SourceLoader",
        "_LoaderBasics",
        "object"
       ],
       "fqname": "apidoc.modules.SourceFileLoader",
       "dict": {
        "get_source": {
         "lines": null,
         "summary": "Concrete implementation of InspectLoader.get_source.",
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          },
          {
           "name": "fullname",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "type": "function",
         "fqname": "apidoc.modules.SourceFileLoader.get_source",
         "doc": []
        },
        "path_mtime": {
         "lines": null,
         "summary": "Optional method that returns the modification time (an int) for the specified path, where path is a str.",
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          },
          {
           "name": "path",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "type": "function",
         "fqname": "apidoc.modules.SourceFileLoader.path_mtime",
         "doc": [
          "Raises IOError when the path cannot be handled."
         ]
        },
        "set_data": {
         "lines": null,
         "summary": "Write bytes data to a file.",
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          },
          {
           "name": "path",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          },
          {
           "name": "data",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          },
          {
           "name": "_mode",
           "default": "438",
           "annotation": null,
           "kind": "KEYWORD_ONLY"
          }
         ],
         "type": "function",
         "fqname": "apidoc.modules.SourceFileLoader.set_data",
         "doc": []
        },
        "_cache_bytecode": {
         "type": "function",
         "lines": null,
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          },
          {
           "name": "source_path",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          },
          {
           "name": "bytecode_path",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          },
          {
           "name": "data",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "fqname": "apidoc.modules.SourceFileLoader._cache_bytecode"
        },
        "exec_module": {
         "lines": null,
         "summary": "Execute the module.",
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          },
          {
           "name": "module",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "type": "function",
         "fqname": "apidoc.modules.SourceFileLoader.exec_module",
         "doc": []
        },
        "load_module": {
         "lines": null,
         "summary": "Load a module from a file.",
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          },
          {
           "name": "name",
           "default": "None",
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          },
          {
           "name": "args",
           "default": null,
           "annotation": null,
           "kind": "VAR_POSITIONAL"
          },
          {
           "name": "kwargs",
           "default": null,
           "annotation": null,
           "kind": "VAR_KEYWORD"
          }
         ],
         "type": "function",
         "fqname": "apidoc.modules.SourceFileLoader.load_module",
         "doc": [
          "This method is deprecated.  Use exec_module() instead."
         ]
        },
        "is_package": {
         "lines": null,
         "summary": "Concrete implementation of InspectLoader.is_package by checking if the path returned by get_filename has a filename of '__init__.py'.",
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          },
          {
           "name": "fullname",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "type": "function",
         "fqname": "apidoc.modules.SourceFileLoader.is_package",
         "doc": []
        },
        "get_code": {
         "lines": null,
         "summary": "Concrete implementation of InspectLoader.get_code.",
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          },
          {
           "name": "fullname",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "type": "function",
         "fqname": "apidoc.modules.SourceFileLoader.get_code",
         "doc": [
          "Reading of bytecode requires path_stats to be implemented. To write bytecode, set_data must also be implemented."
         ]
        },
        "path_stats": {
         "lines": null,
         "summary": "Return the metadata for the path.",
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          },
          {
           "name": "path",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "type": "function",
         "fqname": "apidoc.modules.SourceFileLoader.path_stats",
         "doc": []
        },
        "get_data": {
         "lines": null,
         "summary": "Return the data from path as raw bytes.",
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          },
          {
           "name": "path",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "type": "function",
         "fqname": "apidoc.modules.SourceFileLoader.get_data",
         "doc": []
        },
        "get_filename": {
         "lines": null,
         "summary": "Return the path to the source file as found by the finder.",
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          },
          {
           "name": "name",
           "default": "None",
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          },
          {
           "name": "args",
           "default": null,
           "annotation": null,
           "kind": "VAR_POSITIONAL"
          },
          {
           "name": "kwargs",
           "default": null,
           "annotation": null,
           "kind": "VAR_KEYWORD"
          }
         ],
         "type": "function",
         "fqname": "apidoc.modules.SourceFileLoader.get_filename",
         "doc": []
        },
        "source_to_code": {
         "lines": null,
         "summary": "Return the code object compiled from source.",
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          },
          {
           "name": "data",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          },
          {
           "name": "path",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          },
          {
           "name": "_optimize",
           "default": "-1",
           "annotation": null,
           "kind": "KEYWORD_ONLY"
          }
         ],
         "type": "function",
         "fqname": "apidoc.modules.SourceFileLoader.source_to_code",
         "doc": [
          "The 'data' argument can be any object type that compile() supports."
         ]
        }
       },
       "type": "class",
       "bases": [
        "FileLoader",
        "SourceLoader"
       ],
       "doc": []
      },
      "os": {
       "type": "module",
       "name": "os",
       "path": "/home/samuel/sw/Python-3.4.0b3/lib/python3.4/os.py",
       "fqname": "os"
      },
      "types": {
       "type": "module",
       "name": "types",
       "path": "/home/samuel/sw/Python-3.4.0b3/lib/python3.4/types.py",
       "fqname": "types"
      },
      "is_package_dir": {
       "lines": [
        117,
        123
       ],
       "summary": "Returns true if 'path' is a package directory.",
       "parameters": [
        {
         "name": "path",
         "default": null,
         "annotation": null,
         "kind": "POSITIONAL_OR_KEYWORD"
        }
       ],
       "type": "function",
       "fqname": "apidoc.modules.is_package_dir",
       "doc": []
      },
      "is_package": {
       "type": "function",
       "lines": [
        113,
        115
       ],
       "parameters": [
        {
         "name": "obj",
         "default": null,
         "annotation": null,
         "kind": "POSITIONAL_OR_KEYWORD"
        }
       ],
       "fqname": "apidoc.modules.is_package"
      },
      "logging": {
       "type": "module",
       "name": "logging",
       "path": "/home/samuel/sw/Python-3.4.0b3/lib/python3.4/logging/__init__.py",
       "fqname": "logging"
      },
      "importlib": {
       "type": "module",
       "name": "importlib",
       "path": "/home/samuel/sw/Python-3.4.0b3/lib/python3.4/importlib/__init__.py",
       "fqname": "importlib"
      },
      "sys": {
       "type": "module",
       "name": "sys",
       "path": "None",
       "fqname": "sys"
      }
     },
     "type": "module",
     "name": "modules"
    },
    "path": {
     "source": [
      "import logging\n",
      "import pathlib\n",
      "\n",
      "#-------------------------------------------------------------------------------\n",
      "\n",
      "def resolve(path):\n",
      "    \"\"\"\n",
      "    Resolves the existing part of a path.\n",
      "    \"\"\"\n",
      "    if path.exists():\n",
      "        return path.resolve()\n",
      "    else:\n",
      "        return resolve(path.parent) / path.name\n",
      "\n",
      "\n",
      "class Path(pathlib.PosixPath):\n",
      "\n",
      "    def __new__(class_, *args, **kw_args):\n",
      "        if len(args) == 1 and len(kw_args) == 0 and isinstance(args[0], Path):\n",
      "            return args[0]\n",
      "        else:\n",
      "            return resolve(pathlib.PosixPath.__new__(class_, *args, **kw_args))\n",
      "\n",
      "\n",
      "    def with_suffix(self, suffix):\n",
      "        \"\"\"\n",
      "        @todo\n",
      "          This hopefully will not be needed when the base method is fixed.\n",
      "        \"\"\"\n",
      "        if suffix is None:\n",
      "            if self.suffix == \"\":\n",
      "                return self\n",
      "            else:\n",
      "                return self.parent / self.name[: -len(self.suffix)]\n",
      "        else:\n",
      "            return super().with_suffix(suffix)\n",
      "\n",
      "\n",
      "    def starts_with(self, prefix):\n",
      "        return any( p == prefix for p in self.parents )\n",
      "\n",
      "\n",
      "\n"
     ],
     "path": "/home/samuel/dev/apidoc/src/python/apidoc/path.py",
     "fqname": "apidoc.path",
     "dict": {
      "pathlib": {
       "type": "module",
       "name": "pathlib",
       "path": "/home/samuel/sw/Python-3.4.0b3/lib/python3.4/pathlib.py",
       "fqname": "pathlib"
      },
      "resolve": {
       "lines": [
        6,
        14
       ],
       "summary": "Resolves the existing part of a path.",
       "parameters": [
        {
         "name": "path",
         "default": null,
         "annotation": null,
         "kind": "POSITIONAL_OR_KEYWORD"
        }
       ],
       "type": "function",
       "fqname": "apidoc.path.resolve",
       "doc": []
      },
      "logging": {
       "type": "module",
       "name": "logging",
       "path": "/home/samuel/sw/Python-3.4.0b3/lib/python3.4/logging/__init__.py",
       "fqname": "logging"
      },
      "Path": {
       "lines": [
        16,
        41
       ],
       "mro": [
        "Path",
        "PosixPath",
        "Path",
        "PurePosixPath",
        "PurePath",
        "object"
       ],
       "fqname": "apidoc.path.Path",
       "dict": {
        "is_absolute": {
         "lines": [
          848,
          854
         ],
         "summary": "True if the path is absolute (has both a root and, if applicable, a drive).",
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "type": "function",
         "fqname": "apidoc.path.Path.is_absolute",
         "doc": []
        },
        "is_reserved": {
         "lines": [
          855,
          859
         ],
         "summary": "Return True if the path contains one of the special names reserved by the system, if any.",
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "type": "function",
         "fqname": "apidoc.path.Path.is_reserved",
         "doc": []
        },
        "_raw_open": {
         "lines": [
          946,
          954
         ],
         "summary": "Open the file pointed by this path and return a file descriptor, as os.open() does.",
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          },
          {
           "name": "flags",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          },
          {
           "name": "mode",
           "default": "511",
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "type": "function",
         "fqname": "apidoc.path.Path._raw_open",
         "doc": []
        },
        "touch": {
         "lines": [
          1072,
          1094
         ],
         "summary": "Create this file with the given access mode, if it doesn't exist.",
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          },
          {
           "name": "mode",
           "default": "438",
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          },
          {
           "name": "exist_ok",
           "default": "True",
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "type": "function",
         "fqname": "apidoc.path.Path.touch",
         "doc": []
        },
        "relative_to": {
         "lines": [
          775,
          806
         ],
         "summary": "Return the relative path to another path identified by the passed arguments.  If the operation is not possible (because this is not a subpath of the other path), raise ValueError.",
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          },
          {
           "name": "other",
           "default": null,
           "annotation": null,
           "kind": "VAR_POSITIONAL"
          }
         ],
         "type": "function",
         "fqname": "apidoc.path.Path.relative_to",
         "doc": []
        },
        "_make_child": {
         "type": "function",
         "lines": [
          619,
          624
         ],
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          },
          {
           "name": "args",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "fqname": "apidoc.path.Path._make_child"
        },
        "_from_parsed_parts": {
         "type": "value",
         "value": "<bound method type._from_parsed_parts of <class 'apidoc.path.Path'>>"
        },
        "is_dir": {
         "lines": [
          1192,
          1204
         ],
         "summary": "Whether this path is a directory.",
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "type": "function",
         "fqname": "apidoc.path.Path.is_dir",
         "doc": []
        },
        "parts": {
         "type": "value",
         "value": "<property object at 0x7fd1212d9a48>"
        },
        "lchmod": {
         "lines": [
          1117,
          1125
         ],
         "summary": "Like chmod(), except if the path points to a symlink, the symlink's permissions are changed, rather than its target's.",
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          },
          {
           "name": "mode",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "type": "function",
         "fqname": "apidoc.path.Path.lchmod",
         "doc": []
        },
        "_drv": {
         "type": "value",
         "value": "<member '_drv' of 'PurePath' objects>"
        },
        "with_name": {
         "lines": [
          748,
          754
         ],
         "summary": "Return a new path with the file name changed.",
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          },
          {
           "name": "name",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "type": "function",
         "fqname": "apidoc.path.Path.with_name",
         "doc": []
        },
        "rename": {
         "lines": [
          1152,
          1159
         ],
         "summary": "Rename this path to the given path.",
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          },
          {
           "name": "target",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "type": "function",
         "fqname": "apidoc.path.Path.rename",
         "doc": []
        },
        "open": {
         "lines": [
          1061,
          1071
         ],
         "summary": "Open the file pointed by this path and return a file object, as the built-in open() function does.",
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          },
          {
           "name": "mode",
           "default": "'r'",
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          },
          {
           "name": "buffering",
           "default": "-1",
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          },
          {
           "name": "encoding",
           "default": "None",
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          },
          {
           "name": "errors",
           "default": "None",
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          },
          {
           "name": "newline",
           "default": "None",
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "type": "function",
         "fqname": "apidoc.path.Path.open",
         "doc": []
        },
        "rmdir": {
         "lines": [
          1135,
          1142
         ],
         "summary": "Remove this directory.  The directory must be empty.",
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "type": "function",
         "fqname": "apidoc.path.Path.rmdir",
         "doc": []
        },
        "stat": {
         "lines": [
          1040,
          1046
         ],
         "summary": "Return the result of the stat() system call on this path, like os.stat() does.",
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "type": "function",
         "fqname": "apidoc.path.Path.stat",
         "doc": []
        },
        "suffixes": {
         "type": "value",
         "value": "<property object at 0x7fd1212d99a8>"
        },
        "mkdir": {
         "type": "function",
         "lines": [
          1095,
          1108
         ],
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          },
          {
           "name": "mode",
           "default": "511",
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          },
          {
           "name": "parents",
           "default": "False",
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "fqname": "apidoc.path.Path.mkdir"
        },
        "parents": {
         "type": "value",
         "value": "<property object at 0x7fd1212d9ae8>"
        },
        "match": {
         "lines": [
          860,
          884
         ],
         "summary": "Return True if this path matches the given pattern.",
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          },
          {
           "name": "path_pattern",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "type": "function",
         "fqname": "apidoc.path.Path.match",
         "doc": []
        },
        "starts_with": {
         "type": "function",
         "lines": [
          39,
          41
         ],
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          },
          {
           "name": "prefix",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "fqname": "apidoc.path.Path.starts_with"
        },
        "parent": {
         "type": "value",
         "value": "<property object at 0x7fd1212d9a98>"
        },
        "stem": {
         "type": "value",
         "value": "<property object at 0x7fd1212d99f8>"
        },
        "cwd": {
         "type": "value",
         "value": "<bound method type.cwd of <class 'apidoc.path.Path'>>"
        },
        "suffix": {
         "type": "value",
         "value": "<property object at 0x7fd1212d9958>"
        },
        "is_block_device": {
         "lines": [
          1231,
          1243
         ],
         "summary": "Whether this path is a block device.",
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "type": "function",
         "fqname": "apidoc.path.Path.is_block_device",
         "doc": []
        },
        "root": {
         "type": "value",
         "value": "<property object at 0x7fd1212d9868>"
        },
        "owner": {
         "lines": [
          1047,
          1053
         ],
         "summary": "Return the login name of the file owner.",
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "type": "function",
         "fqname": "apidoc.path.Path.owner",
         "doc": []
        },
        "joinpath": {
         "lines": [
          819,
          826
         ],
         "summary": "Combine this path with one or several arguments, and return a new path representing either a subpath (if all arguments are relative paths) or a totally different path (if one of the arguments is anchored).",
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          },
          {
           "name": "args",
           "default": null,
           "annotation": null,
           "kind": "VAR_POSITIONAL"
          }
         ],
         "type": "function",
         "fqname": "apidoc.path.Path.joinpath",
         "doc": []
        },
        "_root": {
         "type": "value",
         "value": "<member '_root' of 'PurePath' objects>"
        },
        "resolve": {
         "lines": [
          1020,
          1039
         ],
         "summary": "Make the path absolute, resolving all symlinks on the way and also normalizing it (for example turning slashes into backslashes under Windows).",
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "type": "function",
         "fqname": "apidoc.path.Path.resolve",
         "doc": []
        },
        "name": {
         "type": "value",
         "value": "<property object at 0x7fd1212d9908>"
        },
        "glob": {
         "lines": [
          978,
          989
         ],
         "summary": "Iterate over this subtree and yield all existing files (of any kind, including directories) matching the given pattern.",
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          },
          {
           "name": "pattern",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "type": "function",
         "fqname": "apidoc.path.Path.glob",
         "doc": []
        },
        "with_suffix": {
         "lines": [
          25,
          37
         ],
         "summary": "@todo   This hopefully will not be needed when the base method is fixed.",
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          },
          {
           "name": "suffix",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "type": "function",
         "fqname": "apidoc.path.Path.with_suffix",
         "doc": []
        },
        "_raise_closed": {
         "type": "function",
         "lines": [
          939,
          941
         ],
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "fqname": "apidoc.path.Path._raise_closed"
        },
        "_init": {
         "type": "function",
         "lines": [
          915,
          924
         ],
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          },
          {
           "name": "template",
           "default": "None",
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "fqname": "apidoc.path.Path._init"
        },
        "as_posix": {
         "lines": [
          635,
          640
         ],
         "summary": "Return the string representation of the path with forward (/) slashes.",
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "type": "function",
         "fqname": "apidoc.path.Path.as_posix",
         "doc": []
        },
        "is_fifo": {
         "lines": [
          1257,
          1269
         ],
         "summary": "Whether this path is a FIFO.",
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "type": "function",
         "fqname": "apidoc.path.Path.is_fifo",
         "doc": []
        },
        "anchor": {
         "type": "value",
         "value": "<property object at 0x7fd1212d98b8>"
        },
        "_closed": {
         "type": "value",
         "value": "<member '_closed' of 'Path' objects>"
        },
        "_pparts": {
         "type": "value",
         "value": "<member '_pparts' of 'PurePath' objects>"
        },
        "replace": {
         "lines": [
          1160,
          1168
         ],
         "summary": "Rename this path to the given path, clobbering the existing destination if it exists.",
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          },
          {
           "name": "target",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "type": "function",
         "fqname": "apidoc.path.Path.replace",
         "doc": []
        },
        "_cached_cparts": {
         "type": "value",
         "value": "<member '_cached_cparts' of 'PurePath' objects>"
        },
        "symlink_to": {
         "lines": [
          1169,
          1177
         ],
         "summary": "Make this path a symlink pointing to the given path. Note the order of arguments (self, target) is the reverse of os.symlink's.",
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          },
          {
           "name": "target",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          },
          {
           "name": "target_is_directory",
           "default": "False",
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "type": "function",
         "fqname": "apidoc.path.Path.symlink_to",
         "doc": []
        },
        "_make_child_relpath": {
         "type": "function",
         "lines": [
          925,
          930
         ],
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          },
          {
           "name": "part",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "fqname": "apidoc.path.Path._make_child_relpath"
        },
        "exists": {
         "lines": [
          1180,
          1191
         ],
         "summary": "Whether this path exists.",
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "type": "function",
         "fqname": "apidoc.path.Path.exists",
         "doc": []
        },
        "_flavour": {
         "type": "value",
         "value": "<pathlib._PosixFlavour object at 0x7fd1212d7d30>"
        },
        "_parts": {
         "type": "value",
         "value": "<member '_parts' of 'PurePath' objects>"
        },
        "lstat": {
         "lines": [
          1143,
          1151
         ],
         "summary": "Like stat(), except if the path points to a symlink, the symlink's status information is returned, rather than its target's.",
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "type": "function",
         "fqname": "apidoc.path.Path.lstat",
         "doc": []
        },
        "_from_parts": {
         "type": "value",
         "value": "<bound method type._from_parts of <class 'apidoc.path.Path'>>"
        },
        "_parse_args": {
         "type": "value",
         "value": "<bound method type._parse_args of <class 'apidoc.path.Path'>>"
        },
        "group": {
         "lines": [
          1054,
          1060
         ],
         "summary": "Return the group name of the file gid.",
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "type": "function",
         "fqname": "apidoc.path.Path.group",
         "doc": []
        },
        "_cparts": {
         "type": "value",
         "value": "<property object at 0x7fd1212d97c8>"
        },
        "_hash": {
         "type": "value",
         "value": "<member '_hash' of 'PurePath' objects>"
        },
        "is_file": {
         "lines": [
          1205,
          1218
         ],
         "summary": "Whether this path is a regular file (also True for symlinks pointing to regular files).",
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "type": "function",
         "fqname": "apidoc.path.Path.is_file",
         "doc": []
        },
        "is_symlink": {
         "lines": [
          1219,
          1230
         ],
         "summary": "Whether this path is a symbolic link.",
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "type": "function",
         "fqname": "apidoc.path.Path.is_symlink",
         "doc": []
        },
        "_format_parsed_parts": {
         "type": "value",
         "value": "<bound method type._format_parsed_parts of <class 'apidoc.path.Path'>>"
        },
        "absolute": {
         "lines": [
          1002,
          1019
         ],
         "summary": "Return an absolute version of this path.  This function works even if the path doesn't point to anything.",
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "type": "function",
         "fqname": "apidoc.path.Path.absolute",
         "doc": [
          "No normalization is done, i.e. all '.' and '..' will be kept along. Use resolve() to get the canonical path to a file."
         ]
        },
        "unlink": {
         "lines": [
          1126,
          1134
         ],
         "summary": "Remove this file or link. If the path is a directory, use rmdir() instead.",
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "type": "function",
         "fqname": "apidoc.path.Path.unlink",
         "doc": []
        },
        "is_socket": {
         "lines": [
          1270,
          1282
         ],
         "summary": "Whether this path is a socket.",
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "type": "function",
         "fqname": "apidoc.path.Path.is_socket",
         "doc": []
        },
        "drive": {
         "type": "value",
         "value": "<property object at 0x7fd1212d9818>"
        },
        "iterdir": {
         "lines": [
          964,
          977
         ],
         "summary": "Iterate over the files in this directory.  Does not yield any result for the special paths '.' and '..'.",
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "type": "function",
         "fqname": "apidoc.path.Path.iterdir",
         "doc": []
        },
        "chmod": {
         "lines": [
          1109,
          1116
         ],
         "summary": "Change the permissions of the path, like os.chmod().",
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          },
          {
           "name": "mode",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "type": "function",
         "fqname": "apidoc.path.Path.chmod",
         "doc": []
        },
        "rglob": {
         "lines": [
          990,
          1001
         ],
         "summary": "Recursively yield all existing files (of any kind, including directories) matching the given pattern, anywhere in this subtree.",
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          },
          {
           "name": "pattern",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "type": "function",
         "fqname": "apidoc.path.Path.rglob",
         "doc": []
        },
        "_accessor": {
         "type": "value",
         "value": "<member '_accessor' of 'Path' objects>"
        },
        "_str": {
         "type": "value",
         "value": "<member '_str' of 'PurePath' objects>"
        },
        "is_char_device": {
         "lines": [
          1244,
          1256
         ],
         "summary": "Whether this path is a character device.",
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "type": "function",
         "fqname": "apidoc.path.Path.is_char_device",
         "doc": []
        },
        "_opener": {
         "type": "function",
         "lines": [
          942,
          945
         ],
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          },
          {
           "name": "name",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          },
          {
           "name": "flags",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          },
          {
           "name": "mode",
           "default": "438",
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "fqname": "apidoc.path.Path._opener"
        },
        "as_uri": {
         "lines": [
          649,
          654
         ],
         "summary": "Return the path as a 'file' URI.",
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "type": "function",
         "fqname": "apidoc.path.Path.as_uri",
         "doc": []
        }
       },
       "type": "class",
       "bases": [
        "PosixPath"
       ]
      }
     },
     "type": "module",
     "name": "path"
    },
    "base": {
     "source": [
      "\"\"\"\n",
      "Infrastructure code.\n",
      "\n",
      "This module contains infrastructure and utility code not directly related to\n",
      "the application.  The contents should be considered candidates for contribution\n",
      "to more general packages or libraries.\n",
      "\"\"\"\n",
      "\n",
      "#-------------------------------------------------------------------------------\n",
      "\n",
      "from   collections import ChainMap\n",
      "import inspect\n",
      "import logging\n",
      "\n",
      "#-------------------------------------------------------------------------------\n",
      "\n",
      "class Token:\n",
      "\n",
      "    def __init__(self, name):\n",
      "        self.__name = name\n",
      "\n",
      "\n",
      "    def __str__(self):\n",
      "        return self.__name\n",
      "\n",
      "\n",
      "    def __repr__(self):\n",
      "        return \"{}({!r})\".format(self.__class__.__name__, self.__name)\n",
      "\n",
      "\n",
      "    def __hash__(self):\n",
      "        return hash(self.__name)\n",
      "\n",
      "\n",
      "    def __eq__(self, other):\n",
      "        return other is self\n",
      "\n",
      "\n",
      "    def __ne__(self, other):\n",
      "        return other is not self\n",
      "\n",
      "\n",
      "    def __lt__(self, other):\n",
      "        return NotImplemented\n",
      "\n",
      "\n",
      "    __gt__ = __le__ = __ge__ = __lt__\n",
      "\n",
      "\n",
      "        \n",
      "UNDEFINED = Token(\"UNDEFINED\")\n",
      "\n",
      "def log_call(log=logging.debug):\n",
      "    frame = inspect.stack()[1][0]\n",
      "    try:\n",
      "        arg_info = inspect.getargvalues(frame)\n",
      "        args = [ \n",
      "            \"{}={!r}\".format(n, arg_info.locals.get(n, UNDEFINED)) \n",
      "            for n in arg_info.args \n",
      "            ]\n",
      "        if arg_info.varargs is not None:\n",
      "            args.append(\"*{!r}\".format(arg_info.varargs))\n",
      "        if arg_info.keywords is not None:\n",
      "            args.append(\"**{!r}\".format(arg_info.keywords))\n",
      "        fn_name = inspect.getframeinfo(frame).function\n",
      "        log(\"{}({})\".format(fn_name, \", \".join(args)))\n",
      "    finally:\n",
      "        del frame\n",
      "\n",
      "\n",
      "def format_ctor(obj, *args, **kw_args):\n",
      "    name = obj.__class__.__name__\n",
      "    args = [ repr(a) for a in args ]\n",
      "    args.extend( n + \"=\" + repr(v) for n, v in kw_args.items() )\n",
      "    return \"{}({})\".format(name, \", \".join(args))\n",
      "\n",
      "\n",
      "class BaseStruct:\n",
      "\n",
      "    def __init__(self, **kw_args):\n",
      "        for name in self.__slots__:\n",
      "            super(BaseStruct, self).__setattr__(name, kw_args.pop(name, None))\n",
      "        if len(kw_args) > 0:\n",
      "            raise AttributeError(\"no attributes {}\".format(\", \".join(kw_args)))\n",
      "        \n",
      "\n",
      "    def __repr__(self):\n",
      "        return format_ctor(\n",
      "            self, **{ n: getattr(self, n) for n in self.__slots__ })\n",
      "\n",
      "\n",
      "    def __setattr__(self, name, value):\n",
      "        raise RuntimeError(\"read-only struct\")\n",
      "\n",
      "\n",
      "    def copy(self, **kw_args):\n",
      "        for name in self.__slots__:\n",
      "            kw_args.setdefault(name, getattr(self, name))\n",
      "        return self.__class__(**kw_args)\n",
      "\n",
      "\n",
      "\n",
      "def Struct(*names, name=\"Struct\"):\n",
      "    names = tuple( str(n) for n in names )\n",
      "    return type(name, (BaseStruct, ), {\"__slots__\": names})\n",
      "\n",
      "\n"
     ],
     "path": "/home/samuel/dev/apidoc/src/python/apidoc/base.py",
     "fqname": "apidoc.base",
     "dict": {
      "Token": {
       "lines": [
        17,
        48
       ],
       "mro": [
        "Token",
        "object"
       ],
       "fqname": "apidoc.base.Token",
       "dict": {},
       "type": "class",
       "bases": [
        "object"
       ]
      },
      "BaseStruct": {
       "lines": [
        78,
        100
       ],
       "mro": [
        "BaseStruct",
        "object"
       ],
       "fqname": "apidoc.base.BaseStruct",
       "dict": {
        "copy": {
         "type": "function",
         "lines": [
          96,
          100
         ],
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          },
          {
           "name": "kw_args",
           "default": null,
           "annotation": null,
           "kind": "VAR_KEYWORD"
          }
         ],
         "fqname": "apidoc.base.BaseStruct.copy"
        }
       },
       "type": "class",
       "bases": [
        "object"
       ]
      },
      "log_call": {
       "type": "function",
       "lines": [
        53,
        69
       ],
       "parameters": [
        {
         "name": "log",
         "default": "<function debug at 0x7fd12137dc80>",
         "annotation": null,
         "kind": "POSITIONAL_OR_KEYWORD"
        }
       ],
       "fqname": "apidoc.base.log_call"
      },
      "Struct": {
       "type": "function",
       "lines": [
        103,
        106
       ],
       "parameters": [
        {
         "name": "names",
         "default": null,
         "annotation": null,
         "kind": "VAR_POSITIONAL"
        },
        {
         "name": "name",
         "default": "'Struct'",
         "annotation": null,
         "kind": "KEYWORD_ONLY"
        }
       ],
       "fqname": "apidoc.base.Struct"
      },
      "format_ctor": {
       "type": "function",
       "lines": [
        71,
        76
       ],
       "parameters": [
        {
         "name": "obj",
         "default": null,
         "annotation": null,
         "kind": "POSITIONAL_OR_KEYWORD"
        },
        {
         "name": "args",
         "default": null,
         "annotation": null,
         "kind": "VAR_POSITIONAL"
        },
        {
         "name": "kw_args",
         "default": null,
         "annotation": null,
         "kind": "VAR_KEYWORD"
        }
       ],
       "fqname": "apidoc.base.format_ctor"
      },
      "inspect": {
       "type": "module",
       "name": "inspect",
       "path": "/home/samuel/sw/Python-3.4.0b3/lib/python3.4/inspect.py",
       "fqname": "inspect"
      },
      "UNDEFINED": {
       "type": "value",
       "value": "Token('UNDEFINED')"
      },
      "logging": {
       "type": "module",
       "name": "logging",
       "path": "/home/samuel/sw/Python-3.4.0b3/lib/python3.4/logging/__init__.py",
       "fqname": "logging"
      },
      "ChainMap": {
       "lines": [
        760,
        862
       ],
       "summary": "A ChainMap groups multiple dicts (or other mappings) together to create a single, updateable view.",
       "mro": [
        "ChainMap",
        "MutableMapping",
        "Mapping",
        "Sized",
        "Iterable",
        "Container",
        "object"
       ],
       "fqname": "apidoc.base.ChainMap",
       "dict": {
        "new_child": {
         "lines": [
          822,
          830
         ],
         "summary": "New ChainMap with a new map followed by all previous maps. If no map is provided, an empty dict is used.",
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          },
          {
           "name": "m",
           "default": "None",
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "type": "function",
         "fqname": "apidoc.base.ChainMap.new_child",
         "doc": []
        },
        "_abc_negative_cache": {
         "type": "value",
         "value": "<_weakrefset.WeakSet object at 0x7fd121a65eb8>"
        },
        "clear": {
         "lines": [
          859,
          862
         ],
         "summary": "Clear maps[0], leaving maps[1:] intact.",
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "type": "function",
         "fqname": "apidoc.base.ChainMap.clear",
         "doc": []
        },
        "update": {
         "lines": [
          562,
          587
         ],
         "summary": "D.update([E, ]**F) -> None.  Update D from mapping/iterable E and F. If E present and has a .keys() method, does:     for k in E: D[k] = E[k] If E present and lacks .keys() method, does:     for (k, v) in E: D[k] = v In either case, this is followed by: for k, v in F.items(): D[k] = v",
         "parameters": [
          {
           "name": "args",
           "default": null,
           "annotation": null,
           "kind": "VAR_POSITIONAL"
          },
          {
           "name": "kwds",
           "default": null,
           "annotation": null,
           "kind": "VAR_KEYWORD"
          }
         ],
         "type": "function",
         "fqname": "apidoc.base.ChainMap.update",
         "doc": []
        },
        "parents": {
         "type": "value",
         "value": "<property object at 0x7fd121a7d098>"
        },
        "_MutableMapping__marker": {
         "type": "value",
         "value": "<object object at 0x7fd122e15040>"
        },
        "keys": {
         "lines": [
          418,
          421
         ],
         "summary": "D.keys() -> a set-like object providing a view on D's keys",
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "type": "function",
         "fqname": "apidoc.base.ChainMap.keys",
         "doc": []
        },
        "setdefault": {
         "lines": [
          588,
          595
         ],
         "summary": "D.setdefault(k[,d]) -> D.get(k,d), also set D[k]=d if k not in D",
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          },
          {
           "name": "key",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          },
          {
           "name": "default",
           "default": "None",
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "type": "function",
         "fqname": "apidoc.base.ChainMap.setdefault",
         "doc": []
        },
        "_abc_negative_cache_version": {
         "type": "value",
         "value": "23"
        },
        "items": {
         "lines": [
          422,
          425
         ],
         "summary": "D.items() -> a set-like object providing a view on D's items",
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "type": "function",
         "fqname": "apidoc.base.ChainMap.items",
         "doc": []
        },
        "_abc_cache": {
         "type": "value",
         "value": "<_weakrefset.WeakSet object at 0x7fd121a65e48>"
        },
        "pop": {
         "lines": [
          852,
          858
         ],
         "summary": "Remove *key* from maps[0] and return its value. Raise KeyError if *key* not in maps[0].",
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          },
          {
           "name": "key",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          },
          {
           "name": "args",
           "default": null,
           "annotation": null,
           "kind": "VAR_POSITIONAL"
          }
         ],
         "type": "function",
         "fqname": "apidoc.base.ChainMap.pop",
         "doc": []
        },
        "popitem": {
         "lines": [
          845,
          851
         ],
         "summary": "Remove and return an item pair from maps[0]. Raise KeyError is maps[0] is empty.",
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "type": "function",
         "fqname": "apidoc.base.ChainMap.popitem",
         "doc": []
        },
        "_abc_registry": {
         "type": "value",
         "value": "<_weakrefset.WeakSet object at 0x7fd121a65dd8>"
        },
        "copy": {
         "lines": [
          816,
          819
         ],
         "summary": "New ChainMap or subclass with a new copy of maps[0] and refs to maps[1:]",
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "type": "function",
         "fqname": "apidoc.base.ChainMap.copy",
         "doc": []
        },
        "values": {
         "lines": [
          426,
          429
         ],
         "summary": "D.values() -> an object providing a view on D's values",
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "type": "function",
         "fqname": "apidoc.base.ChainMap.values",
         "doc": []
        },
        "fromkeys": {
         "type": "value",
         "value": "<bound method ABCMeta.fromkeys of <class 'collections.ChainMap'>>"
        },
        "get": {
         "type": "function",
         "lines": [
          791,
          793
         ],
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          },
          {
           "name": "key",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          },
          {
           "name": "default",
           "default": "None",
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "fqname": "apidoc.base.ChainMap.get"
        }
       },
       "type": "class",
       "bases": [
        "MutableMapping"
       ],
       "doc": [
        "The underlying mappings are stored in a list.  That list is public and can accessed or updated using the *maps* attribute.  There is no other state.",
        "Lookups search the underlying mappings successively until a key is found. In contrast, writes, updates, and deletions only operate on the first mapping."
       ]
      }
     },
     "type": "module",
     "name": "base",
     "summary": "Infrastructure code.",
     "doc": [
      "This module contains infrastructure and utility code not directly related to the application.  The contents should be considered candidates for contribution to more general packages or libraries."
     ]
    },
    "htmlgen": {
     "source": [
      "import html\n",
      "import functools\n",
      "\n",
      "#-------------------------------------------------------------------------------\n",
      "\n",
      "def terminate(terminator, strings):\n",
      "    result = terminator.join(strings)\n",
      "    if len(result) > 0:\n",
      "        result += terminator\n",
      "    return result\n",
      "\n",
      "\n",
      "def format_tag(name, attrs={}, close=False):\n",
      "    if len(attrs) == 0:\n",
      "        attr_str = \"\"\n",
      "    else:\n",
      "        assert not close\n",
      "        attr_str = \" \" + \" \".join( \n",
      "            '{}=\"{}\"'.format(n, html.escape(v, quote=True)) \n",
      "            for n, v in attrs.items() )\n",
      "    return \"<\" + (\"/\" if close else \"\") + name + attr_str + \">\"\n",
      "\n",
      "\n",
      "class Element:\n",
      "\n",
      "    def __init__(self, tag, *children, **attrs):\n",
      "        try:\n",
      "            attrs[\"class\"] = attrs.pop(\"class_\")\n",
      "        except KeyError:\n",
      "            pass\n",
      "\n",
      "        children = tuple( \n",
      "            c if isinstance(c, Element) else str(c) for c in children )\n",
      "        attrs = { str(n): str(v) for n, v in attrs.items() }\n",
      "\n",
      "        self.__tag = tag\n",
      "        self.__attrs = attrs\n",
      "        self.__children = children\n",
      "\n",
      "\n",
      "    def __repr__(self):\n",
      "        return \"{}({!r}, *{!r}, **{!r})\".format(\n",
      "            self.__class__.__name__, self.__tag, self.__children, self.__attrs)\n",
      "\n",
      "\n",
      "    def __str__(self):\n",
      "        return self.format(\"\", \"\")\n",
      "\n",
      "\n",
      "    @property\n",
      "    def children(self):\n",
      "        return self.__children\n",
      "\n",
      "\n",
      "    @property\n",
      "    def attrs(self):\n",
      "        # FIXME: Return a read-only view.\n",
      "        return self.__attrs\n",
      "\n",
      "\n",
      "    def generate(self, terminator=\"\", indent=\"\", depth=0):\n",
      "        prefix = indent * depth\n",
      "        yield prefix + format_tag(self.__tag, self.__attrs) + terminator\n",
      "        for child in self.__children:\n",
      "            try:\n",
      "                yield from child.generate(terminator, indent, depth + 1)\n",
      "            except AttributeError:\n",
      "                yield prefix + indent + str(child) + terminator\n",
      "        yield prefix + format_tag(self.__tag, close=True) + terminator\n",
      "\n",
      "\n",
      "    def format(self, terminator=\"\\n\", indent=\" \", depth=0):\n",
      "        return \"\".join(self.generate(terminator, indent, depth))\n",
      "\n",
      "\n",
      "\n",
      "#-------------------------------------------------------------------------------\n",
      "\n",
      "def _make_element(tag):\n",
      "    def El(*children, **attrs):\n",
      "        return Element(tag, *children, **attrs)\n",
      "\n",
      "    El.__name__ = tag\n",
      "    return El\n",
      "\n",
      "\n",
      "_elements = tuple(\n",
      "    _make_element(n)\n",
      "    for n in (\n",
      "        \"A\",\n",
      "        \"BODY\",\n",
      "        \"DIV\",\n",
      "        \"EM\",\n",
      "        \"HEAD\",\n",
      "        \"HTML\",\n",
      "        \"IMG\",\n",
      "        \"LI\",\n",
      "        \"LINK\",\n",
      "        \"OL\",\n",
      "        \"P\",\n",
      "        \"PRE\",\n",
      "        \"SCRIPT\",\n",
      "        \"SPAN\",\n",
      "        \"STYLE\",\n",
      "        \"TITLE\",\n",
      "        \"UL\",\n",
      "        )\n",
      "    )\n",
      "\n",
      "globals().update( (e.__name__, e) for e in _elements )\n",
      "\n",
      "#-------------------------------------------------------------------------------\n",
      "\n",
      "__all__ = (\n",
      "    \"Element\",\n",
      "    ) + tuple( e.__name__ for e in _elements )\n",
      "\n",
      "\n"
     ],
     "path": "/home/samuel/dev/apidoc/src/python/apidoc/htmlgen.py",
     "fqname": "apidoc.htmlgen",
     "dict": {
      "_elements": {
       "type": "value",
       "value": "(<function _make_element.<locals>.El at 0x7fd120fe98c8>, <function _make_element.<locals>.El at 0x7fd120fe9950>, <function _make_element.<locals>.El at 0x7fd120fe99d8>, <function _make_element.<locals>.El at 0x7fd120fe9a60>, <function _make_element.<locals>.El at 0x7fd120fe9ae8>, <function _make_element.<locals>.El at 0x7fd120fe9b70>, <function _make_element.<locals>.El at 0x7fd120fe9bf8>, <function _make_element.<locals>.El at 0x7fd120fe9c80>, <function _make_element.<locals>.El at 0x7fd120fe9d08>, <function _make_element.<locals>.El at 0x7fd120fe9d90>, <function _make_element.<locals>.El at 0x7fd120fe9e18>, <function _make_element.<locals>.El at 0x7fd120fe9ea0>, <function _make_element.<locals>.El at 0x7fd120fe9f28>, <function _make_element.<locals>.El at 0x7fd120fb5048>, <function _make_element.<locals>.El at 0x7fd120fb50d0>, <function _make_element.<locals>.El at 0x7fd120fb5158>, <function _make_element.<locals>.El at 0x7fd120fb51e0>)"
      },
      "html": {
       "type": "module",
       "name": "html",
       "path": "/home/samuel/sw/Python-3.4.0b3/lib/python3.4/html/__init__.py",
       "fqname": "html"
      },
      "functools": {
       "type": "module",
       "name": "functools",
       "path": "/home/samuel/sw/Python-3.4.0b3/lib/python3.4/functools.py",
       "fqname": "functools"
      },
      "format_tag": {
       "type": "function",
       "lines": [
        13,
        22
       ],
       "parameters": [
        {
         "name": "name",
         "default": null,
         "annotation": null,
         "kind": "POSITIONAL_OR_KEYWORD"
        },
        {
         "name": "attrs",
         "default": "{}",
         "annotation": null,
         "kind": "POSITIONAL_OR_KEYWORD"
        },
        {
         "name": "close",
         "default": "False",
         "annotation": null,
         "kind": "POSITIONAL_OR_KEYWORD"
        }
       ],
       "fqname": "apidoc.htmlgen.format_tag"
      },
      "LINK": {
       "type": "function",
       "lines": [
        80,
        82
       ],
       "parameters": [
        {
         "name": "children",
         "default": null,
         "annotation": null,
         "kind": "VAR_POSITIONAL"
        },
        {
         "name": "attrs",
         "default": null,
         "annotation": null,
         "kind": "VAR_KEYWORD"
        }
       ],
       "fqname": "apidoc.htmlgen.LINK"
      },
      "_make_element": {
       "type": "function",
       "lines": [
        79,
        85
       ],
       "parameters": [
        {
         "name": "tag",
         "default": null,
         "annotation": null,
         "kind": "POSITIONAL_OR_KEYWORD"
        }
       ],
       "fqname": "apidoc.htmlgen._make_element"
      },
      "LI": {
       "type": "function",
       "lines": [
        80,
        82
       ],
       "parameters": [
        {
         "name": "children",
         "default": null,
         "annotation": null,
         "kind": "VAR_POSITIONAL"
        },
        {
         "name": "attrs",
         "default": null,
         "annotation": null,
         "kind": "VAR_KEYWORD"
        }
       ],
       "fqname": "apidoc.htmlgen.LI"
      },
      "SPAN": {
       "type": "function",
       "lines": [
        80,
        82
       ],
       "parameters": [
        {
         "name": "children",
         "default": null,
         "annotation": null,
         "kind": "VAR_POSITIONAL"
        },
        {
         "name": "attrs",
         "default": null,
         "annotation": null,
         "kind": "VAR_KEYWORD"
        }
       ],
       "fqname": "apidoc.htmlgen.SPAN"
      },
      "HTML": {
       "type": "function",
       "lines": [
        80,
        82
       ],
       "parameters": [
        {
         "name": "children",
         "default": null,
         "annotation": null,
         "kind": "VAR_POSITIONAL"
        },
        {
         "name": "attrs",
         "default": null,
         "annotation": null,
         "kind": "VAR_KEYWORD"
        }
       ],
       "fqname": "apidoc.htmlgen.HTML"
      },
      "STYLE": {
       "type": "function",
       "lines": [
        80,
        82
       ],
       "parameters": [
        {
         "name": "children",
         "default": null,
         "annotation": null,
         "kind": "VAR_POSITIONAL"
        },
        {
         "name": "attrs",
         "default": null,
         "annotation": null,
         "kind": "VAR_KEYWORD"
        }
       ],
       "fqname": "apidoc.htmlgen.STYLE"
      },
      "IMG": {
       "type": "function",
       "lines": [
        80,
        82
       ],
       "parameters": [
        {
         "name": "children",
         "default": null,
         "annotation": null,
         "kind": "VAR_POSITIONAL"
        },
        {
         "name": "attrs",
         "default": null,
         "annotation": null,
         "kind": "VAR_KEYWORD"
        }
       ],
       "fqname": "apidoc.htmlgen.IMG"
      },
      "Element": {
       "lines": [
        24,
        74
       ],
       "mro": [
        "Element",
        "object"
       ],
       "fqname": "apidoc.htmlgen.Element",
       "dict": {
        "attrs": {
         "type": "value",
         "value": "<property object at 0x7fd120feaa98>"
        },
        "children": {
         "type": "value",
         "value": "<property object at 0x7fd12105eea8>"
        },
        "format": {
         "type": "function",
         "lines": [
          72,
          74
         ],
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          },
          {
           "name": "terminator",
           "default": "'\\n'",
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          },
          {
           "name": "indent",
           "default": "' '",
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          },
          {
           "name": "depth",
           "default": "0",
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "fqname": "apidoc.htmlgen.Element.format"
        },
        "generate": {
         "type": "function",
         "lines": [
          61,
          70
         ],
         "parameters": [
          {
           "name": "self",
           "default": null,
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          },
          {
           "name": "terminator",
           "default": "''",
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          },
          {
           "name": "indent",
           "default": "''",
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          },
          {
           "name": "depth",
           "default": "0",
           "annotation": null,
           "kind": "POSITIONAL_OR_KEYWORD"
          }
         ],
         "fqname": "apidoc.htmlgen.Element.generate"
        }
       },
       "type": "class",
       "bases": [
        "object"
       ]
      },
      "EM": {
       "type": "function",
       "lines": [
        80,
        82
       ],
       "parameters": [
        {
         "name": "children",
         "default": null,
         "annotation": null,
         "kind": "VAR_POSITIONAL"
        },
        {
         "name": "attrs",
         "default": null,
         "annotation": null,
         "kind": "VAR_KEYWORD"
        }
       ],
       "fqname": "apidoc.htmlgen.EM"
      },
      "UL": {
       "type": "function",
       "lines": [
        80,
        82
       ],
       "parameters": [
        {
         "name": "children",
         "default": null,
         "annotation": null,
         "kind": "VAR_POSITIONAL"
        },
        {
         "name": "attrs",
         "default": null,
         "annotation": null,
         "kind": "VAR_KEYWORD"
        }
       ],
       "fqname": "apidoc.htmlgen.UL"
      },
      "HEAD": {
       "type": "function",
       "lines": [
        80,
        82
       ],
       "parameters": [
        {
         "name": "children",
         "default": null,
         "annotation": null,
         "kind": "VAR_POSITIONAL"
        },
        {
         "name": "attrs",
         "default": null,
         "annotation": null,
         "kind": "VAR_KEYWORD"
        }
       ],
       "fqname": "apidoc.htmlgen.HEAD"
      },
      "BODY": {
       "type": "function",
       "lines": [
        80,
        82
       ],
       "parameters": [
        {
         "name": "children",
         "default": null,
         "annotation": null,
         "kind": "VAR_POSITIONAL"
        },
        {
         "name": "attrs",
         "default": null,
         "annotation": null,
         "kind": "VAR_KEYWORD"
        }
       ],
       "fqname": "apidoc.htmlgen.BODY"
      },
      "PRE": {
       "type": "function",
       "lines": [
        80,
        82
       ],
       "parameters": [
        {
         "name": "children",
         "default": null,
         "annotation": null,
         "kind": "VAR_POSITIONAL"
        },
        {
         "name": "attrs",
         "default": null,
         "annotation": null,
         "kind": "VAR_KEYWORD"
        }
       ],
       "fqname": "apidoc.htmlgen.PRE"
      },
      "A": {
       "type": "function",
       "lines": [
        80,
        82
       ],
       "parameters": [
        {
         "name": "children",
         "default": null,
         "annotation": null,
         "kind": "VAR_POSITIONAL"
        },
        {
         "name": "attrs",
         "default": null,
         "annotation": null,
         "kind": "VAR_KEYWORD"
        }
       ],
       "fqname": "apidoc.htmlgen.A"
      },
      "SCRIPT": {
       "type": "function",
       "lines": [
        80,
        82
       ],
       "parameters": [
        {
         "name": "children",
         "default": null,
         "annotation": null,
         "kind": "VAR_POSITIONAL"
        },
        {
         "name": "attrs",
         "default": null,
         "annotation": null,
         "kind": "VAR_KEYWORD"
        }
       ],
       "fqname": "apidoc.htmlgen.SCRIPT"
      },
      "TITLE": {
       "type": "function",
       "lines": [
        80,
        82
       ],
       "parameters": [
        {
         "name": "children",
         "default": null,
         "annotation": null,
         "kind": "VAR_POSITIONAL"
        },
        {
         "name": "attrs",
         "default": null,
         "annotation": null,
         "kind": "VAR_KEYWORD"
        }
       ],
       "fqname": "apidoc.htmlgen.TITLE"
      },
      "P": {
       "type": "function",
       "lines": [
        80,
        82
       ],
       "parameters": [
        {
         "name": "children",
         "default": null,
         "annotation": null,
         "kind": "VAR_POSITIONAL"
        },
        {
         "name": "attrs",
         "default": null,
         "annotation": null,
         "kind": "VAR_KEYWORD"
        }
       ],
       "fqname": "apidoc.htmlgen.P"
      },
      "DIV": {
       "type": "function",
       "lines": [
        80,
        82
       ],
       "parameters": [
        {
         "name": "children",
         "default": null,
         "annotation": null,
         "kind": "VAR_POSITIONAL"
        },
        {
         "name": "attrs",
         "default": null,
         "annotation": null,
         "kind": "VAR_KEYWORD"
        }
       ],
       "fqname": "apidoc.htmlgen.DIV"
      },
      "OL": {
       "type": "function",
       "lines": [
        80,
        82
       ],
       "parameters": [
        {
         "name": "children",
         "default": null,
         "annotation": null,
         "kind": "VAR_POSITIONAL"
        },
        {
         "name": "attrs",
         "default": null,
         "annotation": null,
         "kind": "VAR_KEYWORD"
        }
       ],
       "fqname": "apidoc.htmlgen.OL"
      },
      "terminate": {
       "type": "function",
       "lines": [
        6,
        11
       ],
       "parameters": [
        {
         "name": "terminator",
         "default": null,
         "annotation": null,
         "kind": "POSITIONAL_OR_KEYWORD"
        },
        {
         "name": "strings",
         "default": null,
         "annotation": null,
         "kind": "POSITIONAL_OR_KEYWORD"
        }
       ],
       "fqname": "apidoc.htmlgen.terminate"
      }
     },
     "type": "module",
     "name": "htmlgen"
    }
   },
   "type": "package",
   "name": "apidoc",
   "summary": "API documentation extraction service.",
   "doc": []
  }
 }
}