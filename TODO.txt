Inspection
- callable flag separate from signature
- read through method descriptor

Doc support
* Inherited tag.
* Label items in __all__.
- Aliases (e.g. asyncore.poll3).

Markup
* Javadoc.
  - @ivar
  - @note
  - @author and all that
* Distinguish packages from modules.
* Mark built-in / frozen / extension modules.
* Mark modules part of Python library.
- Link Python library modules to docs.

Text UI
- distinguish method, staticmethod, classmethod from functions
  - handle or change the "func" field
- show return type annotation and javadoc
- show information about properties
- show base classes / MRO
- distinguish extension types / functions / modules
- distinguish builtin modules and their contents
- show/hide protected or private names
- look up builtins directly on command line (e.g. "supdoc str")
- command line --help
- clean up styles
- add a help() replacement
- get terminal width from attached terminal, not stdout
- clean up code
- inherited members?
! help for an **object**!

UI
* Object display based on doc components, rather than on type.
* Show function arguments on obj page.
* Better function object pages, with params etc.
* Label or select protected, private contents.
* Label inherited contents and where they're inherited from
* Select inherited contents or not.
* Show object name in breadcrumbs.
* Make check state persistent across navigation.
* Attribute sort order strategies: declaration, alphabetical, by type.
- Keyboard shortcuts for check state.
- Breadcrumb formatting.
- Move imports to a tab?
- Show submodules. (?)
- Details?
- Add non-module paths to breadcrumbs.
- Fix/test inherited attributes.
- Make module list hierarchical.
- Make module list collapsible.
- Create a (push, slide) side menu for modules ("off-canvas sidebar").
- Use Ace for code.
- Pretty-print values.
- Fold up large values.

Integeration
- Dynamic inspection + server.
- Dynamic reload.

Internals
* Rename package apidoc -> supdoc.
* Move reintegrate serve.py into Python source.
- Controller architecture makes no sense.
- Don't need to store name for objects if we have qualname.

Project
* Logo.
- Copyright banners in source.
- Copyright banner on page.

Testing
* Test on a third-party library.
* Test on standard library.
- Create a larger test corpus.

================================================================================
Done
- Remove module list from top.
- Create a module index page.
- Rename moduleName -> fqName et seq.
- Make json fully hierarchical.  List submodules in packages.
- Package breadcrumbs.
- Serve Bootstrap, AngularJS, etc locally.
- Use Angular directives to set up Bootstrap stuff e.g. module link, class link.
- Create a class page.
- Create a function page.
- Sort module list on index.
- Make $scope.modname the module name, $scope.mod the object.
* staticmethod, classmethod
* Name.  supdoc!
* github
* Resurrect source.
* properties
* other values than types, functions
- Style navigatable links.  Change pointer?
- Load modules separately.
* Mark protected, private contents.

================================================================================
Some markup seen in the wild:

- double back-ticks for identifiers (abc.py)
