Doc support
* property, staticmethod, classmethod
* other values than types, functions

Markup
* Javadoc.
* Mark built-in / frozen / extension modules.
* Mark modules part of Python library.
* Mark protected, private contents.
- Link Python library modules to docs.

UI
* Better function object pages, with params etc.
* Resurrect source.
* Label or select protected, private contents.
* Label inherited contents and where they're inherited from
* Select inherited contents or not.
- Fix tabs.
- Details?
- Style navigatable links.  Change pointer?
- Add non-module paths to breadcrumbs.
- Fix/test inherited attributes.
- Make module list hierarchical.
- Make module list collapsible.
- Create a (push, slide) side menu for modules ("off-canvas sidebar").
- Add values / other accordion section.
- Use Ace for code.
- Make accordian state persistent across navigation.

Integeration
- Load modules separately.
- Dynamic inspection + server.

Internals
- Controller architecture makes no sense.
- Don't need to store name for objects if we have qualname.

Project
* Name.
* Logo.
- Copyright banners in source.
- Copyright banner on page.

Testint
* Test on a third-party library.
* Test on standard library.
- Create a larger test corpus.

================================================================================
Done
- Remove module list from top.
- Create a module index page.
- Rename moduleName -> fqName et seq.
- Make json fully hierarchical.  List submodules in packages.
- Package breadcrumbs.
- Serve Bootstrap, AngularJS, etc locally.
- Use Angular directives to set up Bootstrap stuff e.g. module link, class link.
- Create a class page.
- Create a function page.
- Sort module list on index.
- Make $scope.modname the module name, $scope.mod the object.
