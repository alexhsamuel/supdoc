Doc support
* Inherited tag.

Markup
* Javadoc.
* Distinguish packages from modules.
* Mark built-in / frozen / extension modules.
* Mark modules part of Python library.
- Link Python library modules to docs.

UI
* Object display based on doc components, rather than on type.
* Show function arguments on obj page.
* Better function object pages, with params etc.
* Label or select protected, private contents.
* Label inherited contents and where they're inherited from
* Select inherited contents or not.
* Show object name in breadcrumbs.
* Make check state persistent across navigation.
- Breadcrumb formatting.
- Move imports to a tab?
- Show submodules. (?)
- Details?
- Add non-module paths to breadcrumbs.
- Fix/test inherited attributes.
- Make module list hierarchical.
- Make module list collapsible.
- Create a (push, slide) side menu for modules ("off-canvas sidebar").
- Use Ace for code.

Integeration
- Dynamic inspection + server.
- Dynamic reload.

Internals
* Rename package apidoc -> supdoc.
* Move reintegrate serve.py into Python source.
- Controller architecture makes no sense.
- Don't need to store name for objects if we have qualname.

Project
* Logo.
- Copyright banners in source.
- Copyright banner on page.

Testing
* Test on a third-party library.
* Test on standard library.
- Create a larger test corpus.

================================================================================
Done
- Remove module list from top.
- Create a module index page.
- Rename moduleName -> fqName et seq.
- Make json fully hierarchical.  List submodules in packages.
- Package breadcrumbs.
- Serve Bootstrap, AngularJS, etc locally.
- Use Angular directives to set up Bootstrap stuff e.g. module link, class link.
- Create a class page.
- Create a function page.
- Sort module list on index.
- Make $scope.modname the module name, $scope.mod the object.
* staticmethod, classmethod
* Name.  supdoc!
* github
* Resurrect source.
* properties
* other values than types, functions
- Style navigatable links.  Change pointer?
- Load modules separately.
* Mark protected, private contents.

================================================================================
Some markup seen in the wild:

- double back-ticks for identifiers (abc.py)
